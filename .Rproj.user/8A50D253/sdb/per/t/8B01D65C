{
    "contents" : "rm(list=ls(all=TRUE)) #Clear out variables from previous runs.\noptions(\"scipen\"=10, \"digits\"=5) \n######### Set Up Working Directory!!\nlibrary(Hmisc)\nlibrary(sem)\nlibrary(corrgram)\nlibrary(psych)\nlibrary(sem)\nlibrary(ggplot2)\n\n# Please consult the website of James Steiger (www.statpower.net) for all materials pertaining to this demonstration. \n\n\n# Useful function for multivariate stats\nsource(\"http://statpower.net/Content/312/R%20Stuff/Steiger%20R%20Library%20Functions.txt\")\n# Functions to assist you in FA and SEM\nsource(\"http://statpower.net/Content/312/R%20Stuff/AdvancedFactorFunctions.txt\")\n# Functions by Dirk Enzmann to aid promax rotation\nsource(\"http://statpower.net/Content/312/R%20Stuff/fa.promax.R\")\n# Load Athletic data directly from James Stieger's website\nAthleticsData <- read.csv(\"http://statpower.net/Content/312/Homework/AthleticsData.csv\")\n# attach(AthleticsData)\n\n\n#          R            Correlation/Covariance matrix - R  \n#      F      F'        Grahm-Factors                 - F\n#   VD1/2   D1/2V'      Principle Component patterns  - pcPattern\n#   V     D     V'      Earhart-Young decomposition   - V, D   \n#      Rv = cv          Eigenvalues and Eigenvectors  \n\nR<-cor(AthleticsData) # correlation matrix R of variables in AthleticsData\neigen<-eigen(R) # eigen decomposition of R      #  VDV' : $values -eigenvalues, $vectors\nsvd<-svd(R)   # single value decomposition of R #  UDV' : $d      -eigenvalues, $u,$v\n\nVe<-eigen$vectors            # eigenvectors   from VDV' of R\nDe<-diag(eigen$values)       # eigenvalues    from VDV' of R\nUs<-svd$u                     # eigenvectors U from UDV' of R\nDs<-diag(svd$d)               # eigenvalues    from UDV' of R\nVs<-svd$v                     # eigenvectors V from UDV' of R\n\nFe<-(Ve %*% sympower(De,1/2))      # principal component pattern F=V(D^1/2) \nFs<-(Vs) %*% sympower(Ds,1/2)  # same computed from UDV'\n\n\n# Renaming for convenience\nrownames(Ve)<-colnames(R) \nrownames(De)<-colnames(R)\nrownames(Us)<-colnames(R)\nrownames(Ds)<-colnames(R)\nrownames(Vs)<-colnames(R)\n\ncolnames(Ve)<-paste0(\"PC\",1:ncol(R)) # name the components\ncolnames(De)<-paste0(\"PC\",1:ncol(R)) # name the components\ncolnames(Us)<-paste0(\"PC\",1:ncol(R)) # name the components\ncolnames(Ds)<-paste0(\"PC\",1:ncol(R)) # name the components\ncolnames(Vs)<-paste0(\"PC\",1:ncol(R)) # name the components\n\nrownames(Fe)<-colnames(R)      # names the variables\nrownames(Fs)<-colnames(R)      # names the variables\ncolnames(Fe)<-paste0(\"PC\",1:ncol(R)) # name the components\ncolnames(Fs)<-paste0(\"PC\",1:ncol(R))# name the components\n\n# the values in eigen values are the a the same.\nround(abs(Ve)-abs(Vs),3)\nround(abs(Ve)-abs(Us),3)\nround(abs(Vs)-abs(Us),3)\n\n# but signs differ\nsign(Ve)+sign(Vs)\nsign(Ve)+sign(Us)\nsign(Vs)+sign(Us)\n\nR1<-Ve %*% De %*% t(Ve) # eigen decomposition  R = VDV' \nround(sum((R-R1)^2),10) # should perfectly reconstruct = 0\n\nR1s<- Us %*% Ds %*% t(Vs) # single value R = UDV'\nround(((R-R1s)^2),10) # should perfectly reconstruct = 0\n\n######### Compare VDV'(eigen) and UDV'(svd) solutions ##########################\nstr(R)\nhead(R)\n\nsvd$d\neigen$values\n\nVe                          # V from VDV'\nsvd$u                      # U from UDV'\nround(abs(Ve)-abs(svd$u),2) # values are the same, signs differ\nround(Ve-svd$u,2)           # but not for all columns!\n                                                \nVe                          # V from VDV'                                \nsvd$v                      # V from UDV'                                \nround(abs(Ve)-abs(svd$v),2) # values are the same, signs differ          \nround(Ve-svd$v,2)           # but not for all columns!                   \n########################### this is because we work with square matrices\n\n\n# Reconstruct R using Grahn Factors from VDV'\nR2<-Fe%*%t(Fe) # R2 =(FF') (VD1/2)(VD1/2)'= (VDV') = R\nround(sum((R-R2)^2),10) # should perfectly reconstruct = 0\n\n# Reconstruct R using Grahn Factors from UDV'\nR2s<-Fs%*%t(Fs) # Factors reconstruct UDV': R2s =(FF') = (VDV') =R\nround(sum((R-R2s)^2),10) # should perfectly reconstruct = 0\n\n# # But is is Graph Factor of \n# pcPatternEV\n# pcPatternSVD\n# round((abs(pcPatternEV)-abs(pcPatternSVD) ),3) # values of loading are the same \n# sign(round(((pcPatternEV-pcPatternSVD)),3)) # the sign differ\n# solutions   [1]       [2]        [3]\nsolution<-c(\"eigen()\", \"svd()\",\"principal()\")\nwhatsolution<- solution[3] \n# rotation   [1]      [2]       [3]       [4]       [5]       [6]        [7]  \nrotation<-c(\"none\",\"varimax\",\"quatimax\",\"promax\",\"oblimin\",\"simplimax\",\"cluster\")\nwhatrotation<-as.character(rotation[1])\nnfactors<-9\n  \nfit <- principal(r=AthleticsData, nfactors=nfactors, rotate=whatrotation) \nfit # print results   \n# fit$values\n# fit$loadings\n# str(fit)\nF<-fit$loadings[1:9,1:9]\n# extract the parameter values from fitted object\neigens<-colSums(fit$loadings*fit$loadings) # eigenvalues\nexplained<-colSums(fit$loading*fit$loading)/dim(fit$loading)[1]  # variance explained\ncumulative<-cumsum(colSums(fit$loading*fit$loading)/dim(fit$loading)[1]) # cummulative\n# Create  D matrix with eigenvalues and thier informations\nDplus<-rbind(eigens,explained,cumulative)\n\n\n# Ve       # Eigen decomposition, eigenvectors,  V from VDV' of R\n# De       # Eigen decomposition, eigenvalues,   D from VDV' of R\n\n# Us      # SVD decomposition,   eigenvectors,  U from UDV' of R\n# Ds      # SVD decomposition,   eigenvalues,   D from UDV' of R\n# Vs      # SVD decomposition,   eigenvectors,  V from UDV' of R\n\n# Dplus   # Eigensvalues from solution of the dedicated routine\n\n# Fe   # principal component pattern F=V(D^1/2) , from EiGenDecomposition\n# Fs  # same computed from UDV' # from single value decomposition\n# F     # pattern loading from function\n\n#          R            Correlation/Covariance matrix - R  \n#      F      F'        Grahm-Factors                 - F\n#   VD1/2   D1/2V'      Principle Component patterns  - pcPattern\n#   V     D     V'      Earhart-Young decomposition   - V, D   \n#      Rv = cv          Eigenvalues and Eigenvectors  \n\n######   Producing graphs   # Ctrl+Alt+E - Run from line to end\npathScree<-file.path(getwd(),\"Scripts/Functions/scree.R\")\npathPattern<-file.path(getwd(),\"Scripts/Functions/factor pattern.R\")\n\n# palette <- choose_palette() # run to initiate a dialogue to choose palette\n# colors<-palette(2) # assign the vector containing the N colorcodes \ncolors<- c(\"darksalmon\" ,\"lightskyblue\")\n                                #choose where the file will be stored\npathImageOut<-file.path(getwd(), \"temp\")\npattern<-F   # matrix for the factor pattern\ndrawing<- \"F\"  # name of file with graph\n\ntitle<- paste0(\"Pattern values from \",whatsolution,\" \\rotation : \",whatrotation,\", Factors = \",nfactors)\nylims<-c(0,3)           # max for eigenvalue plot \nwidth<-450              # width of pattern in pixels\nheight<-900             # height of pattern in pixels\nwidth2<-300            # width of scree in pixels\nheight2<-200            # height of scree in pixels\n\n# source(pathPattern) #produces the graph of pattern loadings\n\n\nDplus<- Dplus   # matrix with eigenvalues\ntitle2<- paste0(\"Scree plot \",whatsolution,\" rotation : \",whatrotation)\ntitle3<- paste0(\"Var Explnd from \",whatsolution,\".\",\"rotation - \",whatrotation)\nsource(pathScree) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "created" : 1425319986943.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3983745279",
    "id" : "8B01D65C",
    "lastKnownWriteTime" : 1425321246,
    "path" : "~/GitHub/psy533/Cases/EAF with R/EFA with R(pdf)-02-03-2015.R",
    "project_path" : "Cases/EAF with R/EFA with R(pdf)-02-03-2015.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}