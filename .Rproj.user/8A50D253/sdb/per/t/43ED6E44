{
    "contents" : "rm(list=ls(all=TRUE)) # cleans the environment\ncat(\"\\014\") # clean console\n\n## Refresh of statistic basics: \n## Linear Transformations, Means, Deviations\n\n# Enter a vector named X containing numbers 1, 2, 3, 4, and 5 \nX <- c(1, 2, 3, 4, 5)\n\n# Create a linear tranformation Y = bX + a, where b = 2,  a = 5\nY <- 2 * X + 5\nY\n\n# Compute mean of X\nmean(X)\n\n# Linear tranform of the mean : bX + a, where b = 2,  a = 5\n2 * mean(X) + 5\n\n# Compute mean of Y\nmean(Y)\n\n# Compute Deviation Score of X named dx\ndx <- X - mean(X)\n\n# Variance\nvar(X)\n\n# Standard Deviation\nsd(X)\n\n\n## Activity #1 \n## Demonstrate the effect of linear transformation on variance and standard deviation\n\n\n\n## Operations with vectors and matrices\n\n# Enter data by row\nA <- matrix(c(1,2,3,4,5,6),2,3,byrow=FALSE)\nA\n\nB <- matrix(c(.1,.2,.3,.4,.5,.6),2,3,byrow=FALSE)\nB\n\na <- matrix(c(1,2,3,4,5,6),6,1)\na\n\n# Retreive data from matrices\nA[1,2]\nA[2,3]\nA[2,]\nA[,2]\nA[,2:3]\n\n\n## Demonstrate Communtative law\n\n# Particular example\nleft <- A + B\nright <- B + A\nprint(left,right)\nall.equal(left, right)\n\n# A more general  demonstration with simulated numbers\nA <- matrix(round(rnorm(6,4,2)),2,3)\nB <- matrix(round(rnorm(6,4,2)),2,3)\nleft <- A + B\nright <- B + A\nprint(left,right)\nall.equal(left, right)\n\n## Demonstrate Associative law (HM1)\n## Demonstrate Distributive law (HM1)\n\n\n## Scalar multiplication\nA <- matrix(c(1,0,2,5), 2,2)\nA\n2*A\n\n# 2A = A2\nleft <- 2 * A\nright <- A * 2\nprint(left,right)\nall.equal(left, right)\n\n\n##  Transposing matrices: Properties\nA\nt(A)\nt(t(A))\n\n# Demonstrate that (A’)’ = A\nall.equal(A,t(tA))\n\n## Activity : Demonstrate Key properties of the transpose\n\n# Demonstrate that (cA)’ = cA’\nall.equal( t(2*A), 2*t(A) )\n# Demonstrate that (A + B)’ =  A’ + B’\nall.equal( t(A + B), t(A) + t(B))\n# Demonstrate that (AB)’ = B’A’\nC <- matrix(round(rnorm(6,4,2)),2,3)\nD <- matrix(round(rnorm(6,4,2)),3,2)\nall.equal( t(C%*%D), t(D) %*% t(C)) # see matrix multiplication\n\n\n## Demonstrate 3 rules of matrix multiplication (HM1)\n\n\n## Vector by Vector multiplication\na <- c(1,2,5)\nb <- c(2,4,3)\na\nb\n# Elementwise multiplication of a and b\na * b\n\n# Adding the results of elementwise multiplication of a and b\nsum(a*b)\n\n# The previous two operations can be replicated by \n# Matrix multiplation of a and b\na%*%b\n\n# Change numeric vectors into matrices by assigning  dimension attribute\ndim(a) <- c(1,3)\ndim(b) <- c(3,1)\n\n# Post multiply a by b (matrix)\na%*%b\n\n# Pre multiply a by b (matrix)\nb%*%a\n\n\n## Matrix by Matrix Multiplication\nA <- matrix( c(1,0,2,5), 2,2, byrow=FALSE)\nB <- matrix(c(-1,-2,4,3),2,2,byrow=F)\nA\nB\n\n# Pre multiply B by A\nA %*% B\n\n# Post multiply B by A\nB %*% A\n\n## Matrix Division : Inverses\nA <- matrix( c(1,3,3,9,6,5,9,1,8), 3,3, byrow=FALSE)\nA\n\n# Find the inverse of A\nsolve(A)\n\n# Verify : AA^-1 should be identity\nA %*% solve(A)\nzapsmall(A %*% solve(A))\nround(A %*% solve(A))\n\nB <- matrix( c(1, 2,3, 0,1,4,5,6,0), 3,3, byrow=TRUE)\nsolve(B)\n\n\n## Possible Activity: using A and x matrices on page 40 (AMA) replicate the quadratic form (2.22)\n\n## Inverses and their properties\n\n# Demonstrate: \n# AA^-1 = I = A^-1A\nleft <- A %*% solve(A)\nright <- solve(A) %*% A\nall.equal(left,right)\n\n# (AB)^-1 =  (B^-1)(A^-1)\nleft <- solve(A %*% B)\nright <- solve(B) %*% solve(A)\nall.equal(left,right)\n\n# (A^-1)^-1 = A\nleft <- solve(solve(A))\nright <- A\nall.equal(left,right)\n\n# (A')^-1 = (A^-1)'\nleft <- solve(t(A))\nright <- t(solve(A))\nall.equal(left,right)\n\n\n## Determinants and their properties\n\n# Find the determinant of A\ndet(A)\n\n# Demonstrate:\n# |A'| = |A| \nleft  <- det(t(A))\nright <- det(A)\nall.equal(left, right)\n\n# |A^-1| = 1/|A| \nleft  <- det(solve(A))\nright <- 1/det(A)\nprint(c(left,right))\nall.equal(left, right)\n\n# |AB| = |A||B|\nleft  <- det (A %*% B)\nright <- det(A) * det(B)\nprint(c(left,right))\nall.equal(left, right)\n\n\n## The Trace\nA\n# Find the trace of A\nsum(diag(A))\n\n# Define function named \"trace\" that finds the trace of the matrix that you pass to the function\ntrace <- function(x){  return(sum(diag(x)))  }\n# Pass matrix A to function \"trace\"\ntrace(A)\n\n# Demonstrate:\n# Tr(A + B) = Tr(A) + Tr(B)\nleft <- trace(A + B)\nright <- trace(A) + trace(B)\nprint(c(left,right))\nall.equal(left, right)\n\n# Tr(A) = Tr(A’)\nleft <- trace(A)\nright <- trace(t(A))\nprint(c(left,right))\nall.equal(left, right)\n\n# Tr(cA) = c Tr(A)\nleft <- trace(3*A)\nright <- 3 * trace(A)\nprint(c(left,right))\nall.equal(left, right)\n\n\n\n## Summation v. Matrix\n# Matrix from AMA text, page 11 and 32\nX <- matrix(c(\n  45, 55, 47, 1, 3, 33,\n  51, 54, 57, 0, 1, 23,\n  40, 51, 46, 1, 2, 43, \n  49, 45, 48, 0, 3, 42),4,6, byrow=TRUE)\nX\n\n#create a function named \"unit\" that creates a summation vector (in fact, a matrix of 1s of the order (1,n), where n is the argument to pass to the function, representing the length of the vector.\nunit <- function(n){matrix(rep(1,n),n,1)}\n\n# using function \"unit\" create a a unit vector of size 4\nunit(4)\n# using function \"unit\" create a unity vector of size 6\nunit(6)\n\n\n# pre-multiplying by a summation vector\n# summary over individuals for each variable\nt(unit(4)) %*% X\n\n# post-multiplying by a summation vector\n#  summary for each individuals over all variables\nX %*% unit(6)\n\n# weight vector \nw <- c(1,1,1,0,0,0)\n# post-multiplying by a weight vector\nY <- X %*% w\nY\n\n# Compute the mean using the summation vector\nXbar <- t(unit(4)) %*% X / nrow(X)\nXbar\nmean(X[,1])\n\n# Converting to deviation scores\nX\nx <- X[,1]\nx\ndx <- x - mean(x)\ndx\n",
    "created" : 1421365880407.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2214237679",
    "id" : "43ED6E44",
    "lastKnownWriteTime" : 1421438346,
    "path" : "~/GitHub/psy533/Scripts/Weeks/Lab1 - Matrix Algebra.R",
    "project_path" : "Scripts/Weeks/Lab1 - Matrix Algebra.R",
    "properties" : {
        "tempName" : "Untitled2"
    },
    "source_on_save" : false,
    "type" : "r_source"
}