{
    "contents" : "# Clear memory from previous runs\nbase::rm(list=base::ls(all=TRUE))\n\n\n## @knitr LoadPackages\n# Load the necessary packages.\nbase::require(base)\nbase::require(knitr)\nbase::require(markdown)\nbase::require(testit)\nbase::require(dplyr)\nbase::require(reshape2)\nbase::require(stringr)\nbase::require(stats)\nbase::require(ggplot2)\n\n## @knitr DeclareGlobals\n\n\n## @knitr LoadData\n# Link to the data source \nmyExtract <- \"./Data/Extract/NLSY97_Attend_20141021/NLSY97_Attend_20141021\"\npathSourceData <- paste0(myExtract,\".csv\") \nSourceData <- read.csv(pathSourceData,header=TRUE, skip=0,sep=\",\")\nds0 <- SourceData\n\n## @knitr ImportVarLabels\n### NLSY97 variable \"id\" is linked to the descriptive label in the header of the STATA formated data file.dtc\" ###\npathSourceLabels <- paste0(myExtract,\".dct\")\nSourceLabels<-read.csv(pathSourceLabels,header=TRUE, skip=0,nrow=17, sep=\"\")\nSourceLabels$X.<-NULL # remove extra column\nSourceLabels\n# rename columns to match NLS Web Investigator format\nSourceLabels<-plyr::rename(SourceLabels,\n                     replace=c(\"infile\"=\"RNUM\",\"dictionary\"=\"VARIABLE_TITLE\")\n) \n# sort for visual inspection\nSourceLabels<-SourceLabels[ with(SourceLabels, order(RNUM)), ]\nSourceLabels\n\n## @knitr RenameVariables\n# rename variables for easier handling\nds0<-plyr::rename(ds0, \n            c(\"R0000100\"=\"id\",\n              \"R0536300\"=\"sex\",\n              \"R1482600\"=\"race\",\n              \"R0536402\"=\"byear\",\n              \"R0536401\"=\"bmonth\",\n              \"R4893400\"=\"attend_2000\",\n              \"R6520100\"=\"attend_2001\",\n              \"S0919300\"=\"attend_2002\",\n              \"S2987800\"=\"attend_2003\",\n              \"S4681700\"=\"attend_2004\",\n              \"S6316700\"=\"attend_2005\",\n              \"S8331500\"=\"attend_2006\",\n              \"T0739400\"=\"attend_2007\",\n              \"T2781700\"=\"attend_2008\",\n              \"T4495000\"=\"attend_2009\",\n              \"T6143400\"=\"attend_2010\",\n              \"T7637300\"=\"attend_2011\"\n              )\n            )\n\n## @knitr QueryData1\n# with $\na <- ds0$id # extracts column \"id\" from dataset \"ds0\"\nclass(a)\nstr(a)\n\n## @knitr QueryData2\n# with [ ]\na <- ds0[,c(\"id\",\"sex\")] # extracts column \"id\" from dataset \"ds0\"\nclass(a)\nstr(a)\n\n## @knitr QueryData3\n# with dplyr package\nrequire(dplyr)\nfilter(ds0, id<5) %>% select(id,sex, race)\n\n## @knitr arrivedsW\n# Manually create the vector that contains the names of the variables you would like to keep. \nattend_years <- paste0(\"attend_\",c(2000:2011))\nselectVars <- c(\"id\", \"sex\", \"race\", \"byear\", \"bmonth\", attend_years)\ndsW <- ds0[,selectVars]\n\n## @knitr RemoveIllegal \n# Remove illegal values. See codebook for description of missingness\nillegal<-as.integer(c(-5:-1,997,998,999))\nfor( variable in names(dsW) ){\n  dsW[,variable]=ifelse(dsW[,variable] %in% illegal,NA,dsW[,variable])\n}\n# Include only records with a valid birth year\ndsW <- dsW[dsW$byear %in% 1980:1984, ]\n#Include only records with a valid ID\ndsW <- dsW[dsW$id != \"V\", ] # rows that do NOT(!) equal string 'V\"\ndsW$id <- as.integer(dsW$id) # forced to be integer\nrm(list=setdiff(ls(), c(\"ds0\",\"dsW\")))\n# cat(\"\\014\") # clears console\n# str(dsW)\n\n\n\n## @knitr Melt01\nrequire(dplyr)\ndplyr::filter(dsW, id < 5) \n\n\n## @knitr Melt02\nTIvars<-c(\"id\", \"sex\",\"race\", \"bmonth\",\"byear\") # Time Invariant (TI)\n# id.vars tells what variables SHOULD NOT be stacked\ndsLong <- reshape2::melt(dsW, id.vars=TIvars) # melt \ndplyr::filter(dsLong, id == 1)\n\n## @knitr Melt03\n# nrow(dsLong)/length(unique(dsLong$id)) # should be integer\ndsLong <- dplyr::filter(dsLong,!is.na(id)) # remove obs with invalid id\n# nrow(dsLong)/length(unique(dsLong$id)) # verify that melting is fine\n# dplyr::filter(dsLong,id==1) # inspect\n\n## @knitr Melt04\n# create varaible \"year\" by stripping the automatic ending in TV variables' names\n# subset 4 characters from the end of the string a into new variable\ndsLong$year<-str_sub(dsLong$variable,-4,-1) \ndplyr::filter(dsLong, id == 1)\n\n## @knitr Melt05\n# remove the automatic ending \nremovePattern <- paste0(\"_\",c(2000:2011))\nfor (i in removePattern){\n  dsLong$variable <- gsub(pattern=i, replacement=\"\", x=dsLong$variable) \n}\ndsLong$year <- as.integer(dsLong$year) # Convert to a number.\ndplyr::filter(dsLong,id==1) # inspect\n\n\n## @knitr Cast01\nrequire(reshape2)\ndsL <- dcast(dsLong, id + sex + race + bmonth + byear + year ~ variable, value.var = \"value\")\ndplyr::filter(dsL,id==1)\n\n## @knitr MutateData01\n#\ndplyr::filter(dsL,id==1) %>% select(id,byear,year,attend)\n\n\n## @knitr MutateData02\ndsL <- dplyr::mutate(dsL, age = year - byear)\ndplyr::filter(dsL,id==1) %>% select(id,byear,year,attend, age)\n\n\n## @knitr LabelFactors\ndsF <- dsL # add factors to the dataset\nsource(\"./Scripts/Data/LabelingFactorLevels.R\")\ndsL <- dsF\nrm(dsF)\ndplyr::filter(dsL,id==1)\n\n\n\n\n## @knitr LoadGraphSettings\n# load themes used to style graphs\nsource(\"./Scripts/Graphs/graphThemes.R\")\n\n\n\n## @knitr selectdsM\ndsM <- dplyr::filter(dsL,id==47) %>%\n  select(id,byear, year, attend, attendF)\ndsM\n\n## @knitr BasicGraph\np <- ggplot(dsM, aes(x=year,y=attend, color=factor(id)))\np <- p + geom_line(size=.4)\np <- p + geom_point(size=2)\np <- p + scale_y_continuous(\"Church attendance\",\n                         limits=c(0, 8),\n                         breaks=c(1:8))\np <- p + scale_x_continuous(\"Year of observation\",\n                         limits=c(2000,2011),\n                         breaks=c(2000:2011))\np <- p + scale_color_manual(values=c(\"purple\"))\np <- p + labs(title=paste0(\"In the past year, how often have you attended a worship service?\"))\np <- p + guides(color = guide_legend(title=\"Respondents\"))\np <- p + theme1\np\n\n## @knitr DataForModel\ndsM <- dplyr::filter(dsL,id==47) %>%\n  select(id,byear, year, attend, attendF) \ndsM$model <-  predict(lm(attend~year,dsM))\n\n\n## @knitr BasicModel\np <- ggplot(dsM, aes(x=year,y=attend, color=factor(id)))\np <- p + geom_line(size=.4)\np <- p + geom_point(size=2)\np <- p + geom_line(aes(y=model),colour=\"red\", linetype=\"dashed\")\np <- p + scale_y_continuous(\"Church attendance\",\n                            limits=c(0, 8),\n                            breaks=c(1:8))\np <- p + scale_x_continuous(\"Year of observation\",\n                            limits=c(2000,2011),\n                            breaks=c(2000:2011))\np <- p + scale_color_manual(values=c(\"purple\"))\np <- p + labs(title=paste0(\"In the past year, how often have you attended a worship service?\"))\np <- p + guides(color = guide_legend(title=\"Respondents\"))\np <- p + theme1\np\n\n\n## @knitr SaveDerivedData\n\npathdsLcsv <- \"./Data/Derived/dsL.csv\"\nwrite.csv(dsL,pathdsLcsv,  row.names=FALSE)\n\npathdsLrds <- \"./Data/Derived/dsL.rds\"\nsaveRDS(object=dsL, file=pathdsLrds, compress=\"xz\")\n\n## @knitr CleanUp\n# # remove all but specified dataset\nrm(list=setdiff(ls(), c(\"dsW\",\"dsL\")))\n",
    "created" : 1425516349602.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "530875284",
    "id" : "9F2BD20",
    "lastKnownWriteTime" : 1415902343,
    "path" : "~/GitHub/COAG-colloquium-2014F/Scripts/Data/dsL.R",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}