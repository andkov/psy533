# GGally::ggpairs(ds,columns = 2:ncol(ds))
## Finding Aptitude outlier
head(ds)
ds <- ds[order(ds$aptit,decreasing=T),]
head(ds)
## Replace outlier with missing
# ds$aptit[ds$aptit==44] <- NA
head(ds)
# GGally::ggpairs(ds,columns = 2:ncol(ds))
## Create outlier identification variable
# ds[,"outlier"]= ifelse(ds[,"aptit"]>=30, 1,0 )
# head(ds)
# ds$outlier[ds$aptit >=30] <- 1
# head(ds)
means <- colMeans(ds[,2:ncol(ds)])
means
covar <- cov(ds[,2:ncol(ds)])
covar
ds$mahal <- mahalanobis(ds[,2:ncol(ds)], means, covar)
ds <- ds[order(ds$mahal,decreasing=T),]
ds
ds[,"out"] <- ifelse(ds[,"mahal"]>=10 , "liar!", "Ok")
ds
GGally::ggpairs(ds,columns = 2:ncol(ds),)
GGally::ggpairs(ds,columns = 2:ncol(ds),color="out")
dsNew <- ds[ds$mahal==0,]
GGally::ggpairs(dsNew,columns = 2:ncol(dsNew))
ds[ds$mahal==0,]
# create an indicator of multivariate outliers
ds$mahal <- mahalanobis(ds[,2:ncol(ds)], means, covar)
ds <- ds[order(ds$mahal,decreasing=T),]
ds
ds[,"out"] <- ifelse(ds[,"mahal"]>=10 , "liar!", "Ok")
ds
# create an indicator of multivariate outliers
ds$mahal <- mahalanobis(ds[,2:ncol(ds)], means, covar)
ds <- ds[order(ds$mahal,decreasing=T),]
ds
ds[,"out"] <- ifelse(ds[,"mahal"]>=10 , "liar!", "Ok")
ds
dsNew <- ds[ds$mahal=="Ok",]
GGally::ggpairs(dsNew,columns = 2:ncol(dsNew))
dsNew
ds
dsNew <- ds[ds$out=="Ok",]
GGally::ggpairs(dsNew,columns = 2:ncol(dsNew))
GGally::ggpairs(dsNew,columns = 2:5)
g <- ggplot2::ggplot(ds, aes(x=Score))
g <- g + geom_bar()
g
g <- ggplot2::ggplot(ds, aes(x=score))
g <- g + geom_bar()
g
g <- ggplot2::ggplot(dsNew, aes(x=score))
g <- g + geom_bar()
g
## Bivariate Distribution
g <- ggplot(ds, aes(x=score,y=intel))
g <- g + geom_point(aes(color=outlier))
g
g <- ggplot(ds, aes(x=score,y=intel))
g <- g + geom_point()
g
g <- ggplot(dsNew, aes(x=score,y=intel))
g <- g + geom_point()
g
g <- ggplot2::ggplot(ds, aes(x=score))
g <- g + geom_boxplot(width=1, fill=NA, color="black", alpha=.5, outlier.colour="red")
g
g <- ggplot2::ggplot(ds, aes(y=score))
g <- g + geom_boxplot(width=1, fill=NA, color="black", alpha=.5, outlier.colour="red")
g
g <- ggplot2::ggplot(ds, aes(y=score))
g <- g + stat_boxplot(width=1, fill=NA, color="black", alpha=.5, outlier.colour="red")
g
g <- ggplot2::ggplot(ds, aes(x=score))
g <- g + stat_boxplot(width=1, fill=NA, color="black", alpha=.5, outlier.colour="red")
g
g <- ggplot2::ggplot(ds, aes(x=1,y=score))
g <- g + stat_boxplot(width=1, fill=NA, color="black", alpha=.5, outlier.colour="red")
g
head(ds)
dsL <- reshape2::melt(ds,id.vars="id" )
dsL <- reshape2::melt(ds[1:5,],id.vars="id", variable.name="measure" )
g <- ggplot2::ggplot(dsL, aes(x=measure,y=value))
g <- g + stat_boxplot(width=1, fill=NA, color="black", alpha=.5, outlier.colour="red")
g
str(dsL)
head(dsL)
table(dsL$value)
# remove all elements for a clean start
rm(list=ls(all=TRUE))
cat("\014")
## @knitr InstallPackage
# source("./Scripts/Utility/InstallPackages.R")
## @knitr LoadPackages
require(sas7bdat) # for inputting data
library(dplyr) # for general data manipulation
library(reshape2) # for data : wide <-> long
library(GGally)
library(plyr)
library(psych) # data summary + etc
library(ggplot2) # graphing
# library(nlme) # estimate fixed models | esp. gls()
# library(lme4) # estimate mixed models | esp. lmer()
# library(arm)  # process model objects
## @knitr DummyChunck
#### ds0 ####
## @knitr LoadDataInitial
pathDir <- getwd() # establish home directory
pathDs<- file.path(pathDir,"Data/AMA/ch3ex1.dat")
# record variable names from MPlus script
namesDs<- c( 'id','Exam_Score', 'Aptitude_Measure', 'Age_in_Years',
'Intelligence_Score', 'Attention_Span')
# ds <- read.table(pathDs,col.names = namesDs)
ds <- read.table(pathDs,header = TRUE)
## @knitr RenameVariables
ds <- plyr::rename(ds, replace=c("Exam_Score"="score",
'Aptitude_Measure' = "aptit",
'Age_in_Years' = "age",
'Intelligence_Score' = "intel",
'Attention_Span' = "atten"))
# ## @knitr Pairs0
# GGally::ggpairs(ds,columns = 2:ncol(ds))
# ## @knitr BasicTables
attach(ds)
table(aptit,score)
detach(ds)
# ## Finding Score outlier
head(ds)
ds <- ds[order(ds$score),]
head(ds)
ds <- ds[order(ds$score,decreasing=T),]
head(ds)
# ## Remove entire case
# ds <- ds[ds$score!=152,]
# head(ds)
## Replace outlier with missing
# ds$score[ds$score==152] <- NA
head(ds)
# ## @knitr Pairs1
# GGally::ggpairs(ds,columns = 2:ncol(ds))
## Finding Aptitude outlier
head(ds)
ds <- ds[order(ds$aptit,decreasing=T),]
head(ds)
## Replace outlier with missing
# ds$aptit[ds$aptit==44] <- NA
head(ds)
# GGally::ggpairs(ds,columns = 2:ncol(ds))
means <- colMeans(ds[,2:ncol(ds)])
means
covar <- cov(ds[,2:ncol(ds)])
covar
# create an indicator of multivariate outliers
ds$mahal <- mahalanobis(ds[,2:ncol(ds)], means, covar)
ds <- ds[order(ds$mahal,decreasing=T),]
ds
ds[,"out"] <- ifelse(ds[,"mahal"]>=10 , 1, 0)
ds
dsNew <- ds[ds$out==0,]
GGally::ggpairs(dsNew,columns = 2:5)
dsL <- reshape2::melt(ds[1:5,],id.vars="id", variable.name="measure" )
str(dsL)
head(dsL)
g <- ggplot2::ggplot(dsL, aes(x=measure,y=value))
g <- g + stat_boxplot(width=1, fill=NA, color="black", alpha=.5, outlier.colour="red")
g
View(dsL)
dsL <- reshape2::melt(ds[,1:5],id.vars="id", variable.name="measure" )
str(dsL)
head(dsL)
View(dsL)
str(dsL)
g <- ggplot2::ggplot(dsL, aes(x=measure,y=value))
g <- g + stat_boxplot(width=1, fill=NA, color="black", alpha=.5, outlier.colour="red")
g
g <- ggplot2::ggplot(dsL, aes(x=measure,y=value))
# g <- g + stat_boxplot(width=1, fill=NA, color="black", alpha=.5, outlier.colour="red")
g <- g + geom_boxplot(width=1, fill=NA, color="black", alpha=.5, outlier.colour="red")
g
dsL <- reshape2::melt(ds[,1:5],id.vars="id", variable.name="measure" )
str(dsL)
head(dsL)
g <- ggplot2::ggplot(dsL, aes(x=measure,y=value))
# g <- g + stat_boxplot(width=1, fill=NA, color="black", alpha=.5, outlier.colour="red")
g <- g + geom_boxplot(width=1, fill=NA, color="black", alpha=.5, outlier.colour="red")
g <- g + stat_summary(fun.y=mean, geom="point", fill="white", shape=21, size=4)
g
g <- ggplot2::ggplot(dsL, aes(x=measure,y=value))
# g <- g + stat_boxplot(width=1, fill=NA, color="black", alpha=.5, outlier.colour="red")
g <- g + geom_violin( adjust=1, alpha=.4 )
g <- g + geom_boxplot(width=1, fill=NA, color="black", alpha=.5, outlier.colour="red")
g <- g + stat_summary(fun.y=mean, geom="point", fill="white", shape=21, size=4)
g
g <- ggplot2::ggplot(dsL, aes(x=measure,y=value))
# g <- g + stat_boxplot(width=1, fill=NA, color="black", alpha=.5, outlier.colour="red")
g <- g + geom_violin( adjust=1, alpha=.4, fill="red" )
g <- g + geom_boxplot(width=1, fill=NA, color="black", alpha=.5, outlier.colour="red")
g <- g + stat_summary(fun.y=mean, geom="point", fill="white", shape=21, size=4)
g
g <- ggplot2::ggplot(dsL, aes(x=measure,y=value))
# g <- g + stat_boxplot(width=1, fill=NA, color="black", alpha=.5, outlier.colour="red")
g <- g + geom_violin( adjust=1, alpha=.4, fill="red" )
g <- g + geom_boxplot(width=.5, fill=NA, color="black", alpha=.5, outlier.colour="red")
g <- g + stat_summary(fun.y=mean, geom="point", fill="white", shape=21, size=4)
g
dsL <- reshape2::melt(dsNew[,1:5],id.vars="id", variable.name="measure" )
str(dsL)
head(dsL)
g <- ggplot2::ggplot(dsL, aes(x=measure,y=value))
# g <- g + stat_boxplot(width=1, fill=NA, color="black", alpha=.5, outlier.colour="red")
g <- g + geom_violin( adjust=1, alpha=.4, fill="red" )
g <- g + geom_boxplot(width=.5, fill=NA, color="black", alpha=.5, outlier.colour="red")
g <- g + stat_summary(fun.y=mean, geom="point", fill="white", shape=21, size=4)
g
dsNewZ <- ddply(dsNew,0,sd)
ddply(dsNew,0,sd)
dsNew
dsNewZ <- plyr::ddply(dsNew,c("score"), transform, x.std = scale(s))
dsNewZ <- plyr::ddply(dsNew,c("score"), transform, x.std = scale(score))
dsNewZ
dsNewZ <- plyr::ddply(dsNew, transform, x.std = scale(score))
scale(dsNew)
# remove all elements for a clean start
rm(list=ls(all=TRUE))
cat("\014")
## @knitr InstallPackage
# source("./Scripts/Utility/InstallPackages.R")
## @knitr LoadPackages
require(sas7bdat) # for inputting data
library(dplyr) # for general data manipulation
library(reshape2) # for data : wide <-> long
library(GGally)
library(plyr)
library(psych) # data summary + etc
library(ggplot2) # graphing
# library(nlme) # estimate fixed models | esp. gls()
# library(lme4) # estimate mixed models | esp. lmer()
# library(arm)  # process model objects
## @knitr DummyChunck
#### ds0 ####
## @knitr LoadDataInitial
pathDir <- getwd() # establish home directory
pathDs<- file.path(pathDir,"Data/AMA/ch3ex1.dat")
# record variable names from MPlus script
namesDs<- c( 'id','Exam_Score', 'Aptitude_Measure', 'Age_in_Years',
'Intelligence_Score', 'Attention_Span')
# ds <- read.table(pathDs,col.names = namesDs)
ds <- read.table(pathDs,header = TRUE)
## @knitr RenameVariables
ds <- plyr::rename(ds, replace=c("Exam_Score"="score",
'Aptitude_Measure' = "aptit",
'Age_in_Years' = "age",
'Intelligence_Score' = "intel",
'Attention_Span' = "atten"))
# ## @knitr Pairs0
# GGally::ggpairs(ds,columns = 2:ncol(ds))
# ## @knitr BasicTables
attach(ds)
table(aptit,score)
detach(ds)
# ## Finding Score outlier
head(ds)
ds <- ds[order(ds$score),]
head(ds)
ds <- ds[order(ds$score,decreasing=T),]
head(ds)
# ## Remove entire case
# ds <- ds[ds$score!=152,]
# head(ds)
## Replace outlier with missing
# ds$score[ds$score==152] <- NA
head(ds)
# ## @knitr Pairs1
# GGally::ggpairs(ds,columns = 2:ncol(ds))
## Finding Aptitude outlier
head(ds)
ds <- ds[order(ds$aptit,decreasing=T),]
head(ds)
## Replace outlier with missing
# ds$aptit[ds$aptit==44] <- NA
head(ds)
# GGally::ggpairs(ds,columns = 2:ncol(ds))
means <- colMeans(ds[,2:ncol(ds)])
means
covar <- cov(ds[,2:ncol(ds)])
covar
# create an indicator of multivariate outliers
ds$mahal <- mahalanobis(ds[,2:ncol(ds)], means, covar)
ds <- ds[order(ds$mahal,decreasing=T),]
ds
ds[,"out"] <- ifelse(ds[,"mahal"]>=10 , 1, 0)
ds
dsNew <- ds[ds$out==0,]
GGally::ggpairs(dsNew,columns = 2:5)
## @knitr DummyChunck
### Basic Graphs  ####
## @knitr LoadGraphThemes
baseSize <- 12 # set as the point of further reference
theme1 <- ggplot2::theme_bw(base_size=baseSize) +
ggplot2::theme(title=ggplot2::element_text(colour="gray20",size = baseSize+1)) +
ggplot2::theme(axis.text=ggplot2::element_text(colour="gray40", size=baseSize-2)) +
ggplot2::theme(axis.title=ggplot2::element_text(colour="gray40")) +
ggplot2::theme(panel.border = ggplot2::element_rect(colour="gray80")) +
ggplot2::theme(axis.ticks.length = grid::unit(0, "cm")) +
ggplot2::theme(text = element_text(size =baseSize+7))
## Univariate Distribution
g <- ggplot2::ggplot(ds, aes(x=score))
g <- g + geom_bar()
g
## Univariate Distribution without outliers
g <- ggplot2::ggplot(dsNew, aes(x=score))
g <- g + geom_bar()
g
head(ds)
## Univariate Distribution
dsL <- reshape2::melt(dsNew[,1:5],id.vars="id", variable.name="measure" )
str(dsL)
head(dsL)
g <- ggplot2::ggplot(dsL, aes(x=measure,y=value))
# g <- g + stat_boxplot(width=1, fill=NA, color="black", alpha=.5, outlier.colour="red")
g <- g + geom_violin( adjust=1, alpha=.4, fill="red" )
g <- g + geom_boxplot(width=.5, fill=NA, color="black", alpha=.5, outlier.colour="red")
g <- g + stat_summary(fun.y=mean, geom="point", fill="white", shape=21, size=4)
g
scale(dsNew)
dsNewZ <- scale(dsNew)
View(dsNewZ)
dsNewZ <- scale(dsNew)
dsL <- reshape2::melt(dsNewZ[,1:6],id.vars="id", variable.name="measure" )
str(dsL)
head(dsL)
g <- ggplot2::ggplot(dsL, aes(x=measure,y=value))
# g <- g + stat_boxplot(width=1, fill=NA, color="black", alpha=.5, outlier.colour="red")
g <- g + geom_violin( adjust=1, alpha=.4, fill="red" )
g <- g + geom_boxplot(width=.5, fill=NA, color="black", alpha=.5, outlier.colour="red")
g <- g + stat_summary(fun.y=mean, geom="point", fill="white", shape=21, size=4)
g
str(dsL)
dsNewZ <- as.data.frame(scale(dsNew))
dsL <- reshape2::melt(dsNewZ[,1:6],id.vars="id", variable.name="measure" )
str(dsL)
head(dsL)
dsNew
# remove all elements for a clean start
rm(list=ls(all=TRUE))
cat("\014")
## @knitr InstallPackage
# source("./Scripts/Utility/InstallPackages.R")
## @knitr LoadPackages
require(sas7bdat) # for inputting data
library(dplyr) # for general data manipulation
library(reshape2) # for data : wide <-> long
library(GGally)
library(plyr)
library(psych) # data summary + etc
library(ggplot2) # graphing
# library(nlme) # estimate fixed models | esp. gls()
# library(lme4) # estimate mixed models | esp. lmer()
# library(arm)  # process model objects
## @knitr DummyChunck
#### ds0 ####
## @knitr LoadDataInitial
pathDir <- getwd() # establish home directory
pathDs<- file.path(pathDir,"Data/AMA/ch3ex1.dat")
# record variable names from MPlus script
namesDs<- c( 'id','Exam_Score', 'Aptitude_Measure', 'Age_in_Years',
'Intelligence_Score', 'Attention_Span')
# ds <- read.table(pathDs,col.names = namesDs)
ds <- read.table(pathDs,header = TRUE)
## @knitr RenameVariables
ds <- plyr::rename(ds, replace=c("Exam_Score"="score",
'Aptitude_Measure' = "aptit",
'Age_in_Years' = "age",
'Intelligence_Score' = "intel",
'Attention_Span' = "atten"))
# ## @knitr Pairs0
# GGally::ggpairs(ds,columns = 2:ncol(ds))
# ## @knitr BasicTables
attach(ds)
table(aptit,score)
detach(ds)
# ## Finding Score outlier
head(ds)
ds <- ds[order(ds$score),]
head(ds)
ds <- ds[order(ds$score,decreasing=T),]
head(ds)
# ## Remove entire case
# ds <- ds[ds$score!=152,]
# head(ds)
## Replace outlier with missing
# ds$score[ds$score==152] <- NA
head(ds)
# ## @knitr Pairs1
# GGally::ggpairs(ds,columns = 2:ncol(ds))
## Finding Aptitude outlier
head(ds)
ds <- ds[order(ds$aptit,decreasing=T),]
head(ds)
## Replace outlier with missing
# ds$aptit[ds$aptit==44] <- NA
head(ds)
# GGally::ggpairs(ds,columns = 2:ncol(ds))
means <- colMeans(ds[,2:ncol(ds)])
means
covar <- cov(ds[,2:ncol(ds)])
covar
# create an indicator of multivariate outliers
ds$mahal <- mahalanobis(ds[,2:ncol(ds)], means, covar)
ds <- ds[order(ds$mahal,decreasing=T),]
ds
ds[,"out"] <- ifelse(ds[,"mahal"]>=10 , 1, 0)
ds
dsNew <- ds[ds$out==0,]
GGally::ggpairs(dsNew,columns = 2:5)
## @knitr DummyChunck
### Basic Graphs  ####
## @knitr LoadGraphThemes
baseSize <- 12 # set as the point of further reference
theme1 <- ggplot2::theme_bw(base_size=baseSize) +
ggplot2::theme(title=ggplot2::element_text(colour="gray20",size = baseSize+1)) +
ggplot2::theme(axis.text=ggplot2::element_text(colour="gray40", size=baseSize-2)) +
ggplot2::theme(axis.title=ggplot2::element_text(colour="gray40")) +
ggplot2::theme(panel.border = ggplot2::element_rect(colour="gray80")) +
ggplot2::theme(axis.ticks.length = grid::unit(0, "cm")) +
ggplot2::theme(text = element_text(size =baseSize+7))
## Univariate Distribution
g <- ggplot2::ggplot(ds, aes(x=score))
g <- g + geom_bar()
g
## Univariate Distribution without outliers
g <- ggplot2::ggplot(dsNew, aes(x=score))
g <- g + geom_bar()
g
head(ds)
dsL <- reshape2::melt(dsNew[,1:6],id.vars="id", variable.name="measure" )
str(dsL)
head(dsL)
g <- ggplot2::ggplot(dsL, aes(x=measure,y=value))
# g <- g + stat_boxplot(width=1, fill=NA, color="black", alpha=.5, outlier.colour="red")
g <- g + geom_violin( adjust=1, alpha=.4, fill="red" )
g <- g + geom_boxplot(width=.5, fill=NA, color="black", alpha=.5, outlier.colour="red")
g <- g + stat_summary(fun.y=mean, geom="point", fill="white", shape=21, size=4)
g
dsNewZ <- as.data.frame(scale(dsNew))
dsL <- reshape2::melt(dsNewZ[,1:6],id.vars="id", variable.name="measure" )
str(dsL)
head(dsL)
g <- ggplot2::ggplot(dsL, aes(x=measure,y=value))
# g <- g + stat_boxplot(width=1, fill=NA, color="black", alpha=.5, outlier.colour="red")
g <- g + geom_violin( adjust=1, alpha=.4, fill="red" )
g <- g + geom_boxplot(width=.5, fill=NA, color="black", alpha=.5, outlier.colour="red")
g <- g + stat_summary(fun.y=mean, geom="point", fill="white", shape=21, size=4)
g
dsL <- reshape2::melt(ds[,1:6],id.vars="id", variable.name="measure" )
str(dsL)
head(dsL)
g <- ggplot2::ggplot(dsL, aes(x=measure,y=value))
# g <- g + stat_boxplot(width=1, fill=NA, color="black", alpha=.5, outlier.colour="red")
g <- g + geom_violin( adjust=1, alpha=.4, fill="red" )
g <- g + geom_boxplot(width=.5, fill=NA, color="black", alpha=.5, outlier.colour="red")
g <- g + stat_summary(fun.y=mean, geom="point", fill="white", shape=21, size=4)
g
dsNewZ <- as.data.frame(scale(dsNew))
dsL <- reshape2::melt(dsNewZ[,1:6],id.vars="id", variable.name="measure" )
str(dsL)
head(dsL)
g <- ggplot2::ggplot(dsL, aes(x=measure,y=value))
# g <- g + stat_boxplot(width=1, fill=NA, color="black", alpha=.5, outlier.colour="red")
g <- g + geom_violin( adjust=1, alpha=.4, fill="red" )
g <- g + geom_boxplot(width=.5, fill=NA, color="black", alpha=.5, outlier.colour="red")
g <- g + stat_summary(fun.y=mean, geom="point", fill="white", shape=21, size=4)
g
g <- ggplot(ds, aes(x=score,y=intel))
g <- g + geom_point()
g
g <- ggplot(dsNew, aes(x=score,y=intel))
g <- g + geom_point()
g
g <- ggplot(ds, aes(x=score,y=intel))
g <- g + geom_point()
g
g <- ggplot(dsNew, aes(x=score,y=intel))
g <- g + geom_point()
g
#### Prep ####
# remove all elements for a clean start
rm(list=ls(all=TRUE))
cat("\014")
## @knitr InstallPackage
# source("./Scripts/Utility/InstallPackages.R")
## @knitr LoadPackages
require(sas7bdat) # for inputting data
library(dplyr) # for general data manipulation
library(reshape2) # for data : wide <-> long
library(GGally) # graphing
library(plyr) # data manipulation
library(psych) # data summary + etc
library(ggplot2) # graphing
## @knitr DummyChunck
#### ds0 ####
## @knitr LoadDataInitial
pathDir <- getwd() # establish home directory
pathDs<- file.path(pathDir,"Data/AMA/ch3ex2.dat")
# record variable names from MPlus script
namesDs<- c( 'id','Exam_Score', 'Aptitude_Measure', 'Age_in_Years',
'Intelligence_Score', 'Attention_Span')
# ds <- read.table(pathDs,col.names = namesDs)
ds <- read.table(pathDs,header = TRUE)
View(ds)
