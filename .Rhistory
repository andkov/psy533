rm(list=ls(all=TRUE))
########## Production of reports from .Rmd files ###
pathFilesToBuild <- base::file.path("./index.Rmd")
testit::assert("The knitr Rmd files should exist.", base::file.exists(pathFilesToBuild))
# Build the report
for( pathFile in pathFilesToBuild ) {
#   pathMd <- base::gsub(pattern=".Rmd$", replacement=".md", x=pathRmd)
rmarkdown::render(input = pathFile,
output_format=c(
#                        "pdf_document"
#                       ,"md_document"
"html_document"
#                       "ioslides_presentation"
),
clean=TRUE)
}
rm(list=ls(all=TRUE))
########## Production of reports from .Rmd files ###
pathFilesToBuild <- base::file.path("./index.Rmd")
testit::assert("The knitr Rmd files should exist.", base::file.exists(pathFilesToBuild))
# Build the report
for( pathFile in pathFilesToBuild ) {
#   pathMd <- base::gsub(pattern=".Rmd$", replacement=".md", x=pathRmd)
rmarkdown::render(input = pathFile,
output_format=c(
#                        "pdf_document"
#                       ,"md_document"
"html_document"
#                       "ioslides_presentation"
),
clean=TRUE)
}
rm(list=ls(all=TRUE))
########## Production of reports from .Rmd files ###
pathFilesToBuild <- base::file.path("./index.Rmd")
testit::assert("The knitr Rmd files should exist.", base::file.exists(pathFilesToBuild))
# Build the report
for( pathFile in pathFilesToBuild ) {
#   pathMd <- base::gsub(pattern=".Rmd$", replacement=".md", x=pathRmd)
rmarkdown::render(input = pathFile,
output_format=c(
#                        "pdf_document"
#                       ,"md_document"
"html_document"
#                       "ioslides_presentation"
),
clean=TRUE)
}
rm(list=ls(all=TRUE))
########## Production of reports from .Rmd files ###
pathFilesToBuild <- base::file.path("./index.Rmd")
testit::assert("The knitr Rmd files should exist.", base::file.exists(pathFilesToBuild))
# Build the report
for( pathFile in pathFilesToBuild ) {
#   pathMd <- base::gsub(pattern=".Rmd$", replacement=".md", x=pathRmd)
rmarkdown::render(input = pathFile,
output_format=c(
#                        "pdf_document"
#                       ,"md_document"
"html_document"
#                       "ioslides_presentation"
),
clean=TRUE)
}
rm(list=ls(all=TRUE))
########## Production of reports from .Rmd files ###
pathFilesToBuild <- base::file.path("./index.Rmd")
testit::assert("The knitr Rmd files should exist.", base::file.exists(pathFilesToBuild))
# Build the report
for( pathFile in pathFilesToBuild ) {
#   pathMd <- base::gsub(pattern=".Rmd$", replacement=".md", x=pathRmd)
rmarkdown::render(input = pathFile,
output_format=c(
#                        "pdf_document"
#                       ,"md_document"
"html_document"
#                       "ioslides_presentation"
),
clean=TRUE)
}
rm(list=ls(all=TRUE))
########## Production of reports from .Rmd files ###
pathFilesToBuild <- base::file.path("./index.Rmd")
testit::assert("The knitr Rmd files should exist.", base::file.exists(pathFilesToBuild))
# Build the report
for( pathFile in pathFilesToBuild ) {
#   pathMd <- base::gsub(pattern=".Rmd$", replacement=".md", x=pathRmd)
rmarkdown::render(input = pathFile,
output_format=c(
#                        "pdf_document"
#                       ,"md_document"
"html_document"
#                       "ioslides_presentation"
),
clean=TRUE)
}
rm(list=ls(all=TRUE))
########## Production of reports from .Rmd files ###
pathFilesToBuild <- base::file.path("./index.Rmd")
testit::assert("The knitr Rmd files should exist.", base::file.exists(pathFilesToBuild))
# Build the report
for( pathFile in pathFilesToBuild ) {
#   pathMd <- base::gsub(pattern=".Rmd$", replacement=".md", x=pathRmd)
rmarkdown::render(input = pathFile,
output_format=c(
#                        "pdf_document"
#                       ,"md_document"
"html_document"
#                       "ioslides_presentation"
),
clean=TRUE)
}
rm(list=ls(all=TRUE))
########## Production of reports from .Rmd files ###
# patternToBuild <- "(?<!README)\\.Rmd$" #Gets all 'Rmd' , that aren't named `README`.
patternToBuild <- "(?<!README)\\.(R){0,1}md$" #Gets all 'Rmd' and 'md' files, that aren't named `README`.
pathFilesToBuild <- list.files(full.names=TRUE, recursive=TRUE)
pathFilesToBuild <- grep(patternToBuild, pathFilesToBuild, perl=TRUE, value=TRUE)
testit::assert("The knitr Rmd files should exist.", base::file.exists(pathFilesToBuild))
for( pathFile in pathFilesToBuild ) {
#   pathMd <- base::gsub(pattern=".Rmd$", replacement=".md", x=pathRmd)
rmarkdown::render(input = pathFile,
output_format=c(
#                        "pdf_document"
#                       ,"md_document"
"html_document"
),
clean=TRUE)
}
base::system("bundle exec jekyll build")
rm(list=ls(all=TRUE))
########## Production of reports from .Rmd files ###
# patternToBuild <- "(?<!README)\\.Rmd$" #Gets all 'Rmd' , that aren't named `README`.
patternToBuild <- "(?<!README)\\.(R){0,1}md$" #Gets all 'Rmd' and 'md' files, that aren't named `README`.
pathFilesToBuild <- list.files(full.names=TRUE, recursive=TRUE)
pathFilesToBuild <- grep(patternToBuild, pathFilesToBuild, perl=TRUE, value=TRUE)
testit::assert("The knitr Rmd files should exist.", base::file.exists(pathFilesToBuild))
for( pathFile in pathFilesToBuild ) {
#   pathMd <- base::gsub(pattern=".Rmd$", replacement=".md", x=pathRmd)
rmarkdown::render(input = pathFile,
output_format=c(
#                        "pdf_document"
#                       ,"md_document"
"html_document"
),
clean=TRUE)
}
base::system("bundle exec jekyll build")
rm(list=ls(all=TRUE))
########## Production of reports from .Rmd files ###
# patternToBuild <- "(?<!README)\\.Rmd$" #Gets all 'Rmd' , that aren't named `README`.
patternToBuild <- "(?<!README)\\.(R){0,1}md$" #Gets all 'Rmd' and 'md' files, that aren't named `README`.
pathFilesToBuild <- list.files(full.names=TRUE, recursive=TRUE)
pathFilesToBuild <- grep(patternToBuild, pathFilesToBuild, perl=TRUE, value=TRUE)
testit::assert("The knitr Rmd files should exist.", base::file.exists(pathFilesToBuild))
for( pathFile in pathFilesToBuild ) {
#   pathMd <- base::gsub(pattern=".Rmd$", replacement=".md", x=pathRmd)
rmarkdown::render(input = pathFile,
output_format=c(
#                        "pdf_document"
#                       ,"md_document"
"html_document"
),
clean=TRUE)
}
base::system("bundle exec jekyll build")
rm(list=ls(all=TRUE))
########## Production of reports from .Rmd files ###
# patternToBuild <- "(?<!README)\\.Rmd$" #Gets all 'Rmd' , that aren't named `README`.
patternToBuild <- "(?<!README)\\.(R){0,1}md$" #Gets all 'Rmd' and 'md' files, that aren't named `README`.
pathFilesToBuild <- list.files(full.names=TRUE, recursive=TRUE)
pathFilesToBuild <- grep(patternToBuild, pathFilesToBuild, perl=TRUE, value=TRUE)
testit::assert("The knitr Rmd files should exist.", base::file.exists(pathFilesToBuild))
for( pathFile in pathFilesToBuild ) {
#   pathMd <- base::gsub(pattern=".Rmd$", replacement=".md", x=pathRmd)
rmarkdown::render(input = pathFile,
output_format=c(
#                        "pdf_document"
#                       ,"md_document"
"html_document"
),
clean=TRUE)
}
base::system("bundle exec jekyll build")
rm(list=ls(all=TRUE))
########## Production of reports from .Rmd files ###
# patternToBuild <- "(?<!README)\\.Rmd$" #Gets all 'Rmd' , that aren't named `README`.
patternToBuild <- "(?<!README)\\.(R){0,1}md$" #Gets all 'Rmd' and 'md' files, that aren't named `README`.
pathFilesToBuild <- list.files(full.names=TRUE, recursive=TRUE)
pathFilesToBuild <- grep(patternToBuild, pathFilesToBuild, perl=TRUE, value=TRUE)
testit::assert("The knitr Rmd files should exist.", base::file.exists(pathFilesToBuild))
for( pathFile in pathFilesToBuild ) {
#   pathMd <- base::gsub(pattern=".Rmd$", replacement=".md", x=pathRmd)
rmarkdown::render(input = pathFile,
output_format=c(
#                        "pdf_document"
#                       ,"md_document"
"html_document"
),
clean=TRUE)
}
base::system("bundle exec jekyll build")
rm(list=ls(all=TRUE))
########## Production of reports from .Rmd files ###
# patternToBuild <- "(?<!README)\\.Rmd$" #Gets all 'Rmd' , that aren't named `README`.
patternToBuild <- "(?<!README)\\.(R){0,1}md$" #Gets all 'Rmd' and 'md' files, that aren't named `README`.
pathFilesToBuild <- list.files(full.names=TRUE, recursive=TRUE)
pathFilesToBuild <- grep(patternToBuild, pathFilesToBuild, perl=TRUE, value=TRUE)
testit::assert("The knitr Rmd files should exist.", base::file.exists(pathFilesToBuild))
for( pathFile in pathFilesToBuild ) {
#   pathMd <- base::gsub(pattern=".Rmd$", replacement=".md", x=pathRmd)
rmarkdown::render(input = pathFile,
output_format=c(
#                        "pdf_document"
#                       ,"md_document"
"html_document"
),
clean=TRUE)
}
base::system("bundle exec jekyll build")
rm(list=ls(all=TRUE))
########## Production of reports from .Rmd files ###
# patternToBuild <- "(?<!README)\\.Rmd$" #Gets all 'Rmd' , that aren't named `README`.
patternToBuild <- "(?<!README)\\.(R){0,1}md$" #Gets all 'Rmd' and 'md' files, that aren't named `README`.
pathFilesToBuild <- list.files(full.names=TRUE, recursive=TRUE)
pathFilesToBuild <- grep(patternToBuild, pathFilesToBuild, perl=TRUE, value=TRUE)
testit::assert("The knitr Rmd files should exist.", base::file.exists(pathFilesToBuild))
for( pathFile in pathFilesToBuild ) {
#   pathMd <- base::gsub(pattern=".Rmd$", replacement=".md", x=pathRmd)
rmarkdown::render(input = pathFile,
output_format=c(
#                        "pdf_document"
#                       ,"md_document"
"html_document"
),
clean=TRUE)
}
base::system("bundle exec jekyll build")
rm(list=ls(all=TRUE))
########## Production of reports from .Rmd files ###
# patternToBuild <- "(?<!README)\\.Rmd$" #Gets all 'Rmd' , that aren't named `README`.
patternToBuild <- "(?<!README)\\.(R){0,1}md$" #Gets all 'Rmd' and 'md' files, that aren't named `README`.
pathFilesToBuild <- list.files(full.names=TRUE, recursive=TRUE)
pathFilesToBuild <- grep(patternToBuild, pathFilesToBuild, perl=TRUE, value=TRUE)
testit::assert("The knitr Rmd files should exist.", base::file.exists(pathFilesToBuild))
for( pathFile in pathFilesToBuild ) {
#   pathMd <- base::gsub(pattern=".Rmd$", replacement=".md", x=pathRmd)
rmarkdown::render(input = pathFile,
output_format=c(
#                        "pdf_document"
#                       ,"md_document"
"html_document"
),
clean=TRUE)
}
base::system("bundle exec jekyll build")
rm(list=ls(all=TRUE))
########## Production of reports from .Rmd files ###
# patternToBuild <- "(?<!README)\\.Rmd$" #Gets all 'Rmd' , that aren't named `README`.
patternToBuild <- "(?<!README)\\.(R){0,1}md$" #Gets all 'Rmd' and 'md' files, that aren't named `README`.
pathFilesToBuild <- list.files(full.names=TRUE, recursive=TRUE)
pathFilesToBuild <- grep(patternToBuild, pathFilesToBuild, perl=TRUE, value=TRUE)
testit::assert("The knitr Rmd files should exist.", base::file.exists(pathFilesToBuild))
for( pathFile in pathFilesToBuild ) {
#   pathMd <- base::gsub(pattern=".Rmd$", replacement=".md", x=pathRmd)
rmarkdown::render(input = pathFile,
output_format=c(
#                        "pdf_document"
#                       ,"md_document"
"html_document"
),
clean=TRUE)
}
base::system("bundle exec jekyll build")
swirl()
library(swirlify)
swirl()
