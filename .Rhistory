## @knitr RenameVariables
ds <- plyr::rename(ds, replace=c("Exam_Score"="score",
'Aptitude_Measure' = "aptit",
'Age_in_Years' = "age",
'Intelligence_Score' = "intel",
'Attention_Span' = "atten"))
## @knitr LoadGraphThemes
## @knitr LoadGraphThemes
baseSize <- 12 # set as the point of further reference
theme1 <- ggplot2::theme_bw(base_size=baseSize) +
ggplot2::theme(title=ggplot2::element_text(colour="gray20",size = baseSize+1)) +
ggplot2::theme(axis.text=ggplot2::element_text(colour="gray40", size=baseSize-2)) +
ggplot2::theme(axis.title=ggplot2::element_text(colour="gray40")) +
ggplot2::theme(panel.border = ggplot2::element_rect(colour="gray80")) +
ggplot2::theme(axis.ticks.length = grid::unit(0, "cm")) +
ggplot2::theme(text = element_text(size =baseSize+7))
g <- ggplot2::ggplot(ds, aes(x=score))
g <- g + geom_bar()
g
g <- ggplot2::ggplot(ds, aes(x=score))
g <- g + geom_bar()
g
# what is the id of the person with a potential outlier?
ds <- ds[order(ds$score,decreasing=F),]
head(ds)
Q1 <- quantile(ds$score)[2]
Q3 <- quantile(ds$score)[4]
IQR <- Q3 - Q1
names(IQR) <- "IQR"
lowerBound <- Q1 - (1.5 * IQR)
names(lowerBound) <- "LB"
upperBound <- Q3 + (1.5 * IQR)
names(upperBound) <- "UB"
c(lowerBound,upperBound)
ds[ds$id==39,"score"] < lowerBound
ds[ds$id==39,"score"] > upperBound
ds[ds$id==39,"score"]
ds[ds$id==39,"score"] < lowerBound
ds[ds$id==39,"score"] > upperBound
g <- ggplot2::ggplot(ds, aes(x=score))
g <- g + geom_bar()
g
# what is the id of the person with a potential outlier?
ds <- ds[order(ds$score,decreasing=F),]
head(ds)
# Visual inspection of "score" suggests that id=39 is a univariate outlier
# Are there outlier according to Tukey's filter?
Q1 <- quantile(ds$score)[2]
Q3 <- quantile(ds$score)[4]
IQR <- Q3 - Q1
names(IQR) <- "IQR"
lowerBound <- Q1 - (1.5 * IQR)
names(lowerBound) <- "LB"
upperBound <- Q3 + (1.5 * IQR)
names(upperBound) <- "UB"
c(lowerBound,upperBound)
ds[ds$id==39,"score"]
ds[ds$id==39,"score"] < lowerBound # True if outlier
ds[ds$id==39,"score"] > upperBound # True if outlier
# value of score in id=39 is an outlier according to Tukey filter
#### Historgrapm: Aptitude ####
# Detect a univariate outlier in "aptit" by visul inspection of values
g <- ggplot2::ggplot(ds, aes(x=aptit))
g <- g + geom_bar()
g
# what is the id of the person with a potential outlier?
ds <- ds[order(ds$aptit,decreasing=T),]
head(ds)
# No outliers were detected visually
# Are there outlier according to Tukey's filter?
Q1 <- quantile(ds$aptit)[2]
Q3 <- quantile(ds$aptit)[4]
IQR <- Q3 - Q1
names(IQR) <- "IQR"
lowerBound <- Q1 - (1.5 * IQR)
names(lowerBound) <- "LB"
upperBound <- Q3 + (1.5 * IQR)
names(upperBound) <- "UB"
c(lowerBound,upperBound)
ds[ds$id==28,"aptit"]
ds[ds$id==28,"aptit"] < lowerBound # True if outlier
#### Historgrapm: Intelligence ####
# Detect a univariate outlier in "aptit" by visul inspection of values
g <- ggplot2::ggplot(ds, aes(x=intel))
g <- g + geom_bar()
g
# what is the id of the person with a potential outlier?
ds <- ds[order(ds$intel,decreasing=F),]
head(ds)
# Are there outlier according to Tukey's filter?
Q1 <- quantile(ds$intel)[2]
Q3 <- quantile(ds$intel)[4]
IQR <- Q3 - Q1
names(IQR) <- "IQR"
lowerBound <- Q1 - (1.5 * IQR)
names(lowerBound) <- "LB"
upperBound <- Q3 + (1.5 * IQR)
names(upperBound) <- "UB"
c(lowerBound,upperBound)
ds[ds$id==13,"intel"]
ds[ds$id==13,"intel"] < lowerBound # True if outlier
ds[ds$id==13,"intel"] > upperBound # True if outlier
# yes, value of intel " in id=13 is an outlier according to Tukey filter
#### Historgrapm: Attention ####
# Detect a univariate outlier in "atten" by visul inspection of values
g <- ggplot2::ggplot(ds, aes(x=atten))
g <- g + geom_bar()
g
# what is the id of the person with a potential outlier?
ds <- ds[order(ds$atten,decreasing=T),]
head(ds)
# Are there outlier according to Tukey's filter?
Q1 <- quantile(ds$atten)[2]
Q3 <- quantile(ds$atten)[4]
IQR <- Q3 - Q1
names(IQR) <- "IQR"
lowerBound <- Q1 - (1.5 * IQR)
names(lowerBound) <- "LB"
upperBound <- Q3 + (1.5 * IQR)
names(upperBound) <- "UB"
c(lowerBound,upperBound)
ds[ds$id==13,"atten"]
ds[ds$id==13,"atten"] < lowerBound # True if outlier
ds[ds$id==13,"atten"] > upperBound # True if outlier
# yes, value of intel " in id=13 is an outlier according to Tukey filter
g <- ggplot2::ggplot(ds, aes(x=atten))
g <- g + geom_bar()
g
ds <- ds[order(ds$atten,decreasing=T),]
head(ds)
Q1 <- quantile(ds$atten)[2]
Q3 <- quantile(ds$atten)[4]
IQR <- Q3 - Q1
IQR
Q1
Q3
IQR
IQR <- Q3 - Q1
Q1 <- quantile(ds$atten)[2]
Q3 <- quantile(ds$atten)[4]
IQR <- Q3 - Q1
names(IQR) <- "IQR"
lowerBound <- Q1 - (1.5 * IQR)
names(lowerBound) <- "LB"
upperBound <- Q3 + (1.5 * IQR)
names(upperBound) <- "UB"
c(lowerBound,upperBound)
ds[ds$id==13,"atten"]
# Are there outlier according to Tukey's filter?
Q1 <- quantile(ds$atten)[2]
Q3 <- quantile(ds$atten)[4]
IQR <- Q3 - Q1
names(IQR) <- "IQR"
lowerBound <- Q1 - (1.5 * IQR)
names(lowerBound) <- "LB"
upperBound <- Q3 + (1.5 * IQR)
names(upperBound) <- "UB"
c(lowerBound,upperBound)
ds[ds$id==39,"atten"]
ds[ds$id==39,"atten"] < lowerBound # True if outlier
ds[ds$id==39,"atten"] > upperBound # True if outlier
# yes, value of intel " in id=13 is an outlier according to Tukey filter
### Multivariate outliers ####
# create an indicator of multivariate outliers
means <- colMeans(ds[,2:ncol(ds)])
means
covar <- cov(ds[,2:ncol(ds)])
covar
ds$mahal <- mahalanobis(ds[,2:ncol(ds)], means, covar) # create a column storing mahalanobis distance
ds <- ds[order(ds$mahal,decreasing=T),] # order by descreasing "mahal"
ds
# create a rule for classifying a multivariate outlier based on the mahal value of 10
ds[,"out"] <- ifelse(ds[,"mahal"]>=10 , 1, 0)
ds
GGally::ggpairs(ds,columns = 2:5)
#### Prep ####
# remove all elements for a clean start
rm(list=ls(all=TRUE))
cat("\014")
## @knitr InstallPackage
# source("./Scripts/Utility/InstallPackages.R")
## @knitr LoadPackages
require(sas7bdat) # for inputting data
library(dplyr) # for general data manipulation
library(reshape2) # for data : wide <-> long
library(GGally) # graphing
library(plyr) # data manipulation
library(psych) # data summary + etc
library(ggplot2) # graphing
## @knitr LoadDataInitial
pathDir <- getwd() # establish home directory
pathDs<- file.path(pathDir,"Data/HM2/hm2data.csv")
# record variable names from MPlus script
namesDs<- c( 'id','Exam_Score', 'Aptitude_Measure', 'Age_in_Years',
'Intelligence_Score', 'Attention_Span')
# ds <- read.table(pathDs,col.names = namesDs)
# ds <- read.table(pathDs,header = TRUE)
ds <- read.csv(pathDs,header = TRUE)
## @knitr RenameVariables
ds <- plyr::rename(ds, replace=c("Exam_Score"="score",
'Aptitude_Measure' = "aptit",
'Age_in_Years' = "age",
'Intelligence_Score' = "intel",
'Attention_Span' = "atten"))
## @knitr LoadGraphThemes
baseSize <- 12 # set as the point of further reference
theme1 <- ggplot2::theme_bw(base_size=baseSize) +
ggplot2::theme(title=ggplot2::element_text(colour="gray20",size = baseSize+1)) +
ggplot2::theme(axis.text=ggplot2::element_text(colour="gray40", size=baseSize-2)) +
ggplot2::theme(axis.title=ggplot2::element_text(colour="gray40")) +
ggplot2::theme(panel.border = ggplot2::element_rect(colour="gray80")) +
ggplot2::theme(axis.ticks.length = grid::unit(0, "cm")) +
ggplot2::theme(text = element_text(size =baseSize+7))
#### Finding Univariate outliers ####
#### Historgrapm: Score ####
# Are there univarite outliers in the variable "score" when values are inspected visually with a histogram?
g <- ggplot2::ggplot(ds, aes(x=score))
g <- g + geom_bar()
g
# what is the id of the person with a potential outlier?
ds <- ds[order(ds$score,decreasing=F),]
head(ds)
# Visual inspection of "score" suggests that id=39 is a univariate outlier
# Are there outlier according to Tukey's filter?
Q1 <- quantile(ds$score)[2]
Q3 <- quantile(ds$score)[4]
IQR <- Q3 - Q1
names(IQR) <- "IQR"
lowerBound <- Q1 - (1.5 * IQR)
names(lowerBound) <- "LB"
upperBound <- Q3 + (1.5 * IQR)
names(upperBound) <- "UB"
c(lowerBound,upperBound)
ds[ds$id==39,"score"]
ds[ds$id==39,"score"] < lowerBound # True if outlier
ds[ds$id==39,"score"] > upperBound # True if outlier
# value of score in id=39 is an outlier according to Tukey filter
#### Historgrapm: Aptitude ####
# Detect a univariate outlier in "aptit" by visul inspection of values
g <- ggplot2::ggplot(ds, aes(x=aptit))
g <- g + geom_bar()
g
# what is the id of the person with a potential outlier?
ds <- ds[order(ds$aptit,decreasing=T),]
head(ds)
# No outliers were detected visually
# Are there outlier according to Tukey's filter?
Q1 <- quantile(ds$aptit)[2]
Q3 <- quantile(ds$aptit)[4]
IQR <- Q3 - Q1
names(IQR) <- "IQR"
lowerBound <- Q1 - (1.5 * IQR)
names(lowerBound) <- "LB"
upperBound <- Q3 + (1.5 * IQR)
names(upperBound) <- "UB"
c(lowerBound,upperBound)
ds[ds$id==28,"aptit"]
ds[ds$id==28,"aptit"] < lowerBound # True if outlier
ds[ds$id==28,"aptit"] > upperBound # True if outlier
# yes, value of aptit" in id=28, 39,20 are outliers according to Tukey filter
#### Historgrapm: Intelligence ####
# Detect a univariate outlier in "aptit" by visul inspection of values
g <- ggplot2::ggplot(ds, aes(x=intel))
g <- g + geom_bar()
g
# what is the id of the person with a potential outlier?
ds <- ds[order(ds$intel,decreasing=F),]
head(ds)
# value of score in id=13 is an outlier according to Tukey filter
# Are there outlier according to Tukey's filter?
Q1 <- quantile(ds$intel)[2]
Q3 <- quantile(ds$intel)[4]
IQR <- Q3 - Q1
names(IQR) <- "IQR"
lowerBound <- Q1 - (1.5 * IQR)
names(lowerBound) <- "LB"
upperBound <- Q3 + (1.5 * IQR)
names(upperBound) <- "UB"
c(lowerBound,upperBound)
ds[ds$id==13,"intel"]
ds[ds$id==13,"intel"] < lowerBound # True if outlier
ds[ds$id==13,"intel"] > upperBound # True if outlier
# yes, value of intel " in id=13 is an outlier according to Tukey filter
#### Historgrapm: Attention ####
# Detect a univariate outlier in "atten" by visul inspection of values
g <- ggplot2::ggplot(ds, aes(x=atten))
g <- g + geom_bar()
g
# what is the id of the person with a potential outlier?
ds <- ds[order(ds$atten,decreasing=T),]
head(ds)
# Visual inspection of "atten" suggests that id=39 is a univariate outlier
# Are there outlier according to Tukey's filter?
Q1 <- quantile(ds$atten)[2]
Q3 <- quantile(ds$atten)[4]
IQR <- Q3 - Q1
names(IQR) <- "IQR"
lowerBound <- Q1 - (1.5 * IQR)
names(lowerBound) <- "LB"
upperBound <- Q3 + (1.5 * IQR)
names(upperBound) <- "UB"
c(lowerBound,upperBound)
ds[ds$id==39,"atten"]
ds[ds$id==39,"atten"] < lowerBound # True if outlier
ds[ds$id==39,"atten"] > upperBound # True if outlier
# yes, value of intel " in id=13 is an outlier according to Tukey filter
#### Multivariate outliers ####
# create an indicator of multivariate outliers
means <- colMeans(ds[,2:ncol(ds)])
means
covar <- cov(ds[,2:ncol(ds)])
covar
ds$mahal <- mahalanobis(ds[,2:ncol(ds)], means, covar) # create a column storing mahalanobis distance
ds <- ds[order(ds$mahal,decreasing=T),] # order by descreasing "mahal"
ds
# create a rule for classifying a multivariate outlier based on the mahal value of 10
ds[,"out"] <- ifelse(ds[,"mahal"]>=10 , 1, 0)
ds
# how many observation should be classified as outliers according to mahalanobis distance if 10 is the cutting point?
# Answer : 4
# create a scatter plot of mahal by mahal
g <- ggplot(ds, aes(x=mahal,y=mahal))
g <- g + geom_point()
g
# How many observation should be classified as multivariate outliers according to the visual inspection of the mahal by mahal scatterplot?
# answer : 3
# Observation of which Id would you recommend for elementwise deletion?
# answer : id = 39, 28, 13.
####  Remove outliers ####
# remove from the dataset the rows for individuals with ids you recommended above
out <- c(39, 28, 13)
dsNew <- ds[!(ds$id %in% out),]
GGally::ggpairs(ds,columns = 2:5)
GGally::ggpairs(dsNew,columns = 2:5)
GGally::ggpairs(ds,columns = 2:6)
GGally::ggpairs(dsNew,columns = 2:6)
cor(ds[,2:5]) - cor(dsNew[,2:6])
cor(ds[,2:6]) - cor(dsNew[,2:6])
>>>>>>> origin/master
ds<-as.data.frame(t(Dplus))
ds$pc<-c(1:ncol(Dplus))
# Scree
p2<-ggplot(ds, aes(x=pc,y=eigens))+
ggtitle(title2)+
geom_abline(intercept=1,slope=0,color="red",linetype="dashed")+
geom_line()+
geom_point()+
scale_y_continuous(limits=c(0,3))+
scale_x_discrete (limits=rev(c(1:ncol(R))))
p2
pathFileOut<-file.path(pathImageOut,paste0(drawing,"_",nfactors,"_",whatrotation,"_Scree",".png"))
png(filename = pathFileOut,
width =width2, height =height2 , units = "in",res=resolution2)
plot(p2)
dev.off()
# Variance Explained
p3<-ggplot(ds, aes(x=pc))+
ggtitle(title3)+
geom_line(y=explained,linetype=4)+
geom_point(y=explained)+
geom_line(y=cumulative,linetype=6)+
geom_point(y=cumulative)+
scale_y_continuous(limits=c(0,1),breaks=c(0,.2,.4,.6,.8,1))+
scale_x_discrete (limits=rev(c(1:ncol(R))))
p3
rm(list=ls(all=TRUE)) #Clear out variables from previous runs.
options("scipen"=10, "digits"=5)
######### Set Up Working Directory!!
library(Hmisc)
library(sem)
library(corrgram)
library(psych)
source("http://statpower.net/Content/312/R%20Stuff/AdvancedFactorFunctions.txt")
install.packages("plotrix")
rm(list=ls(all=TRUE)) #Clear out variables from previous runs.
options("scipen"=10, "digits"=5)
######### Set Up Working Directory!!
library(Hmisc)
library(sem)
library(corrgram)
library(psych)
source("http://statpower.net/Content/312/R%20Stuff/AdvancedFactorFunctions.txt")
source("http://statpower.net/Content/312/R%20Stuff/Steiger%20R%20Library%20Functions.txt")
install.packages("corrgram")
pathHome <- getwd()
source("http://statpower.net/Content/312/R%20Stuff/AdvancedFactorFunctions.txt")
library(sem)
install.packages("sem")
library(sem)
pathHome <- getwd()
source("http://statpower.net/Content/312/R%20Stuff/AdvancedFactorFunctions.txt")
source("http://statpower.net/Content/312/R%20Stuff/Steiger%20R%20Library%20Functions.txt")
pathAthleticData <- "http://statpower.net/Content/312/Homework/AthleticsData.csv"
AthleticsData <- read.csv(pathAthleticData))
AthleticsData <- read.csv(pathAthleticData)
rm(list=ls(all=TRUE)) #Clear out variables from previous runs.
options("scipen"=10, "digits"=5)
######### Set Up Working Directory!!
library(Hmisc)
library(sem)
library(corrgram)
library(psych)
library(sem)
# Please consult the website of James Steiger (www.statpower.net) for all materials pertaining to this demonstration.
# Useful function for multivariate stats
source("http://statpower.net/Content/312/R%20Stuff/Steiger%20R%20Library%20Functions.txt")
# Functions to assist you in FA and SEM
source("http://statpower.net/Content/312/R%20Stuff/AdvancedFactorFunctions.txt")
# Functions by Dirk Enzmann to aid promax rotation
source("http://statpower.net/Content/312/R%20Stuff/fa.promax.R")
# Load Athletic data directly from James Stieger's website
AthleticsData <- read.csv("http://statpower.net/Content/312/Homework/AthleticsData.csv")
# attach(AthleticsData)
View(AthleticsData)
R<-cor(AthleticsData) # correlation matrix R of variables in AthleticsData
R
eigen<-eigen(R) # eigen decomposition of R      #  VDV' : $values -eigenvalues, $vectors
svd<-svd(R)   # single value decomposition of R #  UDV' : $d      -eigenvalues, $u,$v
Ve<-eigen$vectors            # eigenvectors   from VDV' of R
De<-diag(eigen$values)       # eigenvalues    from VDV' of R
Us<-svd$u                     # eigenvectors U from UDV' of R
Ds<-diag(svd$d)               # eigenvalues    from UDV' of R
Vs<-svd$v                     # eigenvectors V from UDV' of R
Ve
Vs
all.equal(Ve, Vs)
all.equal(Ve[1], Vs[1])
all.equal(Ve[2], Vs[2])
all.equal(Ve[9], Vs[9])
all.equal(Ve[8], Vs[8])
all.equal(Ve[,8], Vs[,8])
all.equal(Ve[,1], Vs[,1])
all.equal(Ve[,2], Vs[,2])
all.equal(Ve[,9], Vs[,9])
sympower(De,1/2)
??sympower
rm(list=ls(all=TRUE)) #Clear out variables from previous runs.
options("scipen"=10, "digits"=5)
source("http://statpower.net/Content/312/R%20Stuff/Steiger%20R%20Library%20Functions.txt")
rm(list=ls(all=TRUE)) #Clear out variables from previous runs.
options("scipen"=10, "digits"=5)
######### Set Up Working Directory!!
library(Hmisc)
library(sem)
library(corrgram)
library(psych)
library(sem)
# Please consult the website of James Steiger (www.statpower.net) for all materials pertaining to this demonstration.
# Useful function for multivariate stats
source("http://statpower.net/Content/312/R%20Stuff/Steiger%20R%20Library%20Functions.txt")
# Functions to assist you in FA and SEM
source("http://statpower.net/Content/312/R%20Stuff/AdvancedFactorFunctions.txt")
# Functions by Dirk Enzmann to aid promax rotation
source("http://statpower.net/Content/312/R%20Stuff/fa.promax.R")
# Load Athletic data directly from James Stieger's website
AthleticsData <- read.csv("http://statpower.net/Content/312/Homework/AthleticsData.csv")
# attach(AthleticsData)
#          R            Correlation/Covariance matrix - R
#      F      F'        Grahm-Factors                 - F
#   VD1/2   D1/2V'      Principle Component patterns  - pcPattern
#   V     D     V'      Earhart-Young decomposition   - V, D
#      Rv = cv          Eigenvalues and Eigenvectors
R<-cor(AthleticsData) # correlation matrix R of variables in AthleticsData
eigen<-eigen(R) # eigen decomposition of R      #  VDV' : $values -eigenvalues, $vectors
svd<-svd(R)   # single value decomposition of R #  UDV' : $d      -eigenvalues, $u,$v
Ve<-eigen$vectors            # eigenvectors   from VDV' of R
De<-diag(eigen$values)       # eigenvalues    from VDV' of R
Us<-svd$u                     # eigenvectors U from UDV' of R
Ds<-diag(svd$d)               # eigenvalues    from UDV' of R
Vs<-svd$v                     # eigenvectors V from UDV' of R
torename <- c("Ve","De","Us","Ds","Vs")
torename
rownames(Ve)<-colnames(R)
rownames(De)<-colnames(R)
rownames(Us)<-colnames(R)
rownames(Ds)<-colnames(R)
rownames(Vs)<-colnames(R)
Vs
colnames(Ve)<-paste0("PC",1:ncol(R)) # name the components
colnames(De)<-paste0("PC",1:ncol(R)) # name the components
colnames(Us)<-paste0("PC",1:ncol(R)) # name the components
colnames(Ds)<-paste0("PC",1:ncol(R)) # name the components
colnames(Vs)<-paste0("PC",1:ncol(R)) # name the components
Vs
rownames(Fe)<-colnames(R)      # names the variables
Fe<-(Ve %*% sympower(De,1/2))      # principal component pattern F=V(D^1/2)
Fs<-(Vs) %*% sympower(Ds,1/2)  # same computed from UDV'
Fe
rownames(Fe)<-colnames(R)      # names the variables
rownames(Fs)<-colnames(R)      # names the variables
Fe
Fs
colnames(Fe)<-paste0("PC",1:ncol(R)) # name the components
colnames(Fs)<-paste0("PC",1:ncol(R))# name the components
Fe
colnames(Fs)<-paste0("PC",1:ncol(R))# name the components
Fs
round(abs(Ve)-abs(Vs),3)
round(abs(Ve)-abs(Us),3)
round(abs(Vs)-abs(Us),3)
Ve
Vs
(abs(Ve)
abs(Ve)
abs(Ve)
abs(Vs)
abs(Ve)-abs(Vs)
round(abs(Ve)-abs(Vs),3)
sign(Ve)+sign(Vs)
sign(Ve)
sign(Vs)
sign(Ve)+sign(Vs)
