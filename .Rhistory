<<<<<<< HEAD
=======
<<<<<<< HEAD
<<<<<<< HEAD
=======
#### Data prep ####
ds <- read.table(pathFile, as.is=T) # read in the data
head(ds) # print the first few lines
str(ds) # examine the structure of the object
dim(ds)
nrow(ds)
# convert "." into missing values
ds[ds == "."] <- NA
ds[ds == "No"] <- 0
ds[ds == "Yes"] <- 1
View(ds)
# # convert into factors and assign labels
# noyesLevels<- c(0,1) # what numeric values should represent levels
# noyesLabels<- c("NO", "YES") # what character strings should represent levels
# # loop through all  variable names
# for(i in  colnames(ds)){
#   ds[,i]<- factor(ds[,i], levels = noyesLevels,labels = noyesLabels)
# }
for(i in  colnames(ds)){
ds[,i]<- as.numeric(ds[,i])
}
# subset the data to keep only the row without any missing values
ds <- na.omit(ds)
# passing descriptive names to the variables
>>>>>>> origin/master
varNames <- c("activity", "anxious", "quick", "noreason", "backgrnd", "cheerful", "late", "tired", "lively", "quickly", "thoughts", "reserved", "sensitive", "restless", "nosleep", "keepself", "nervous", "joke", "worry")
#### Examine correlations ####
# compute correlation matrix
=======
# convert "." into missing values
View(ds)
ds[ds == "."] <- NA
View(ds)
ds[ds == "NO"] <- 0
View(ds)
View(ds)
table(ds$v1)
table(ds$V1)
ds[ds == "No"] <- 0
ds[ds == "Yes"] <- 1
View(ds)
for(i in  colnames(ds)){
ds[,i]<- as.numeric(ds[,i])
}
str(ds) # examine the structure of the object
R <- cor(ds)
R
View(ds)
cor(ds$V1,ds$V2)
R <- cor(ds,use = "complete.obs")
View(R)
varNames <- paste(var,1:19)
varNames <- paste("var",1:19)
varNames
R <- cor(ds,use = "complete.obs")
R
options("scipen"=10, "digits"=3) # control the decimal places in the output
R
corrgram(R,upper.panel=panel.conf,lower.panel=panel.pie) # customize panels
corrgram(R,upper.panel=panel.conf,lower.panel=panel.pie, order = T) # sort by PCA
corrgram(R) # get the basic correlogram
corrgram(R,upper.panel=panel.conf,lower.panel=panel.pie) # customize panels
corrgram(R,upper.panel=panel.conf,lower.panel=panel.pie, order = T)
eigen(R)$values # examine eigenvalues directly
dim(ds)
nrow(ds)
Scree.Plot(R, main="Scree plot of 19 Psychological variables (n=702)") # plot the eigen values
FA.Stats(R, n.factors=1:10, n.obs=145, main="RMSEA plot of 19 Psych Variables (n=702)") # Request Chi-Square and RMSEA stats
FA.Stats(R, n.factors=1:10, n.obs=702, main="RMSEA plot of 19 Psych Variables (n=702)") # Request Chi-Square and RMSEA stats
ds1 <- na.rm(ds)
ds1 <- na.omit(ds)
View(ds1)
dim(ds)
ds <- na.omit(ds)
dim(ds)
>>>>>>> origin/master
R <- cor(ds)
# Print the corrleation matrix
R
# print a correlogram of the correlation matrix using corrgram() function of the corrgram package, use default options
>>>>>>> origin/master
corrgram(R)
<<<<<<< HEAD
# customize the correlogram so that the lower triangle gives pie graphs and upper triangle shows the numerical values for the correlation
corrgram(R,upper.panel=panel.conf,lower.panel=panel.pie)
# further customize the correlogram so that variable are ordered according to the PCA logic
corrgram(R,upper.panel=panel.conf,lower.panel=panel.pie, order = T)
#### Question 1 ####
# How many clusters does a visual inspection of the correlogram suggest?
# A: looks like two
#### Conduct factor analysis ####
# list the numerical values of the eigenvalues to be examined directly
eigen(R)$values
# Use Scree.Plot() function to request the graph of eigenvalues, add a descriptive title
Scree.Plot(R, main="Scree plot of 19 Psychological variables (n=360)") # plot the eigen values
source("http://statpower.net/Content/312/R%20Stuff/Steiger%20R%20Library%20Functions.txt")
# Functions to assist you in FA and SEM
source("http://statpower.net/Content/312/R%20Stuff/AdvancedFactorFunctions.txt")
# Functions by Dirk Enzmann to aid promax rotation
source("http://statpower.net/Content/312/R%20Stuff/fa.promax.R")
install.packages("sem")
install.packages("Hmisc")
install.packages("Hmisc")
=======
corrgram(R,upper.panel=panel.conf,lower.panel=panel.pie)
# further customize the correlogram so that variable are ordered according to the PCA logic
corrgram(R,upper.panel=panel.conf,lower.panel=panel.pie, order = T)
eigen(R)$values
# Use Scree.Plot() function to request the graph of eigenvalues, add a descriptive title
Scree.Plot(R, main="Scree plot of 19 Psychological variables (n=360)") # plot the eigen values
#### Question 2 ####
=======
>>>>>>> 906266f8960fc37f6eb781427c59a737b7a55fa4
# How many factors does the scree plot suggest to extract? Explain your reasoning
# A: 3, 4, or 5, depending on the rules you adopt in decision making
# Use FA.Stats() function to request Chi-Square and RMSEA statistics, add a descriptive title
FA.Stats(R, n.factors=1:10, n.obs=360, main="RMSEA plot of 19 Psych Variables (n=360)") # Request Chi-Square and RMSEA stats
out <- MLFA(Correlation.Matrix = R, n.factors=4, n.obs=360) # conduct MLFA and collect all rotations in a single object
Loadings(out, cutoff=.3, num.digits=2)
Loadings(out, cutoff=.3, num.digits=2)
FA.Stats(R, n.factors=1:10, n.obs=150, main="RMSEA plot of 19 Psych Variables (n=360)") # Request Chi-Square and RMSEA stats
>>>>>>> origin/master
>>>>>>> origin/master
#### SETUP ####
rm(list=ls(all=TRUE)) #Clear out variables from previous runs.
options("scipen"=10, "digits"=3) # control the decimal places in the output
# Install packages if necessary
# install.packages("psych")
# install.packages("corrgram")
# install.packages("plotrix")
# install.packages("sem")
# install.packages("Hmisc")
## load the packages
library(psych) # multipurpose for psychologist
library(corrgram) # for graphing correlation matrices
library(Hmisc)# multipurpose
library(sem) # structural equation modeling
library(reshape2) # data transformation
library(ggplot2) # general graphing
library(plotrix) # ploting matrix graphs
# Please consult the website of James Steiger (www.statpower.net) for all materials pertaining to this demonstration. ( See Psychology 312)
## load some custom functions
# Useful function for multivariate stats
source("http://statpower.net/Content/312/R%20Stuff/Steiger%20R%20Library%20Functions.txt")
# Functions to assist you in FA and SEM
source("http://statpower.net/Content/312/R%20Stuff/AdvancedFactorFunctions.txt")
# Functions by Dirk Enzmann to aid promax rotation
source("http://statpower.net/Content/312/R%20Stuff/fa.promax.R")
pathHome <- getwd()
<<<<<<< HEAD
pathFile <- file.path(pathHome,"Homework/HW3.txt")
pathVarnames <- file.path(pathHome,"Homework/varnames.txt")
#### Data prep ####
ds <- read.table(pathFile, as.is=T) # read in the data
=======
pathFile <- file.path(pathHome,"Homework/LongPerkinsTime1SCI.csv")
# pathVarnames <- file.path(pathHome,"Homework/varnames.txt")
#### Data prep ####
ds <- read.table(pathFile, sep=",", header=T) # read in the data
View(ds)
>>>>>>> origin/master
head(ds) # print the first few lines
str(ds) # examine the structure of the object
dim(ds)
nrow(ds)
<<<<<<< HEAD
# convert "." into missing values
ds[ds == "."] <- NA
ds[ds == "No"] <- 0
ds[ds == "Yes"] <- 1
# View(ds)
# # convert into factors and assign labels
# noyesLevels<- c(0,1) # what numeric values should represent levels
# noyesLabels<- c("NO", "YES") # what character strings should represent levels
# # loop through all  variable names
# for(i in  colnames(ds)){
#   ds[,i]<- factor(ds[,i], levels = noyesLevels,labels = noyesLabels)
# }
for(i in  colnames(ds)){
ds[,i]<- as.numeric(ds[,i])
}
# subset the data to keep only the row without any missing values
ds <- na.omit(ds)
# passing descriptive names to the variables
varNames <- c("activity", "anxious", "quick", "noreason", "backgrnd", "cheerful", "late", "tired", "lively", "quickly", "thoughts", "reserved", "sensitive", "restless", "nosleep", "keepself", "nervous", "joke", "worry")
#### Examine correlations ####
# compute correlation matrix
R <- cor(ds)
# Print the corrleation matrix
R
=======
table(ds$SCI1)
R <- cor(ds)
# Print the corrleation matrix
R
R <- cor(ds,use = "complete.obs")
# Print the corrleation matrix
R
dim(ds)
ds <- na.omit(ds)
dim(ds)
R <- cor(ds,use = "complete.obs")
# Print the corrleation matrix
R
>>>>>>> origin/master
# print a correlogram of the correlation matrix using corrgram() function of the corrgram package, use default options
corrgram(R)
# customize the correlogram so that the lower triangle gives pie graphs and upper triangle shows the numerical values for the correlation
corrgram(R,upper.panel=panel.conf,lower.panel=panel.pie)
# further customize the correlogram so that variable are ordered according to the PCA logic
corrgram(R,upper.panel=panel.conf,lower.panel=panel.pie, order = T)
<<<<<<< HEAD
#### Question 1 ####
# How many clusters does a visual inspection of the correlogram suggest?
# A: looks like two
#### Conduct factor analysis ####
# list the numerical values of the eigenvalues to be examined directly
eigen(R)$values
# Use Scree.Plot() function to request the graph of eigenvalues, add a descriptive title
Scree.Plot(R, main="Scree plot of 19 Psychological variables (n=360)") # plot the eigen values
FA.Stats(R, n.factors=1:10, n.obs=360, main="RMSEA plot of 19 Psych Variables (n=360)") # Request Chi-Square and RMSEA stats
out <- MLFA(Correlation.Matrix = R, n.factors=4, n.obs=360) # conduct MLFA and collect all rotations in a single object
Loadings(out, cutoff=.3, num.digits=2)
Loadings(out, cutoff=.3, num.digits=2)
names(ds) <- varNames
head(ds)
=======
Scree.Plot(R, main="Scree plot of 19 Psychological variables (n=360)") # plot the eigen values
FA.Stats(R, n.factors=1:10, n.obs=360, main="RMSEA plot of 19 Psych Variables (n=360)") # Request Chi-Square and RMSEA stats
FA.Stats(R, n.factors=1:10, n.obs=575, main="RMSEA plot of 19 Psych Variables (n=575)") # Request Chi-Square and RMSEA stats
out.4 <- MLFA(Correlation.Matrix = R, n.factors=4, n.obs=360) # conduct MLFA and collect all rotations in a single object
Loadings(out.4, cutoff=.3, num.digits=2)
Loadings(out.4, cutoff=.3, num.digits=2)
>>>>>>> origin/master
#### SETUP ####
rm(list=ls(all=TRUE)) #Clear out variables from previous runs.
options("scipen"=10, "digits"=3) # control the decimal places in the output
# Install packages if necessary
# install.packages("psych")
# install.packages("corrgram")
# install.packages("plotrix")
# install.packages("sem")
# install.packages("Hmisc")
## load the packages
library(psych) # multipurpose for psychologist
library(corrgram) # for graphing correlation matrices
library(Hmisc)# multipurpose
library(sem) # structural equation modeling
library(reshape2) # data transformation
library(ggplot2) # general graphing
library(plotrix) # ploting matrix graphs
# Please consult the website of James Steiger (www.statpower.net) for all materials pertaining to this demonstration. ( See Psychology 312)
## load some custom functions
# Useful function for multivariate stats
source("http://statpower.net/Content/312/R%20Stuff/Steiger%20R%20Library%20Functions.txt")
# Functions to assist you in FA and SEM
source("http://statpower.net/Content/312/R%20Stuff/AdvancedFactorFunctions.txt")
# Functions by Dirk Enzmann to aid promax rotation
source("http://statpower.net/Content/312/R%20Stuff/fa.promax.R")
pathHome <- getwd()
pathFile <- file.path(pathHome,"Homework/LongPerkinsTime1SCI.csv")
#### Data prep ####
ds <- read.table(pathFile, sep=",", header=T) # read in the data
head(ds) # print the first few lines
str(ds) # examine the structure of the object
dim(ds)
nrow(ds)
<<<<<<< HEAD
# convert "." into missing values
ds[ds == "."] <- NA
ds[ds == "No"] <- 0
ds[ds == "Yes"] <- 1
# View(ds)
# # convert into factors and assign labels
# noyesLevels<- c(0,1) # what numeric values should represent levels
# noyesLabels<- c("NO", "YES") # what character strings should represent levels
# # loop through all  variable names
# for(i in  colnames(ds)){
#   ds[,i]<- factor(ds[,i], levels = noyesLevels,labels = noyesLabels)
# }
for(i in  colnames(ds)){
ds[,i]<- as.numeric(ds[,i])
}
# subset the data to keep only the row without any missing values
ds <- na.omit(ds)
# passing descriptive names to the variables
varNames <- c("activity", "anxious", "quick", "noreason", "backgrnd", "cheerful", "late", "tired", "lively", "quickly", "thoughts", "reserved", "sensitive", "restless", "nosleep", "keepself", "nervous", "joke", "worry")
names(ds) <- varNames
head(ds)
#### Examine correlations ####
# compute correlation matrix
R <- cor(ds)
# Print the corrleation matrix
R
# print a correlogram of the correlation matrix using corrgram() function of the corrgram package, use default options
corrgram(R)
# customize the correlogram so that the lower triangle gives pie graphs and upper triangle shows the numerical values for the correlation
corrgram(R,upper.panel=panel.conf,lower.panel=panel.pie)
# further customize the correlogram so that variable are ordered according to the PCA logic
corrgram(R,upper.panel=panel.conf,lower.panel=panel.pie, order = T)
#### Question 1 ####
# How many clusters does a visual inspection of the correlogram suggest?
# A: looks like two
#### Conduct factor analysis ####
# list the numerical values of the eigenvalues to be examined directly
eigen(R)$values
# Use Scree.Plot() function to request the graph of eigenvalues, add a descriptive title
Scree.Plot(R, main="Scree plot of 19 Psychological variables (n=360)") # plot the eigen values
#### Question 2 ####
# How many factors does the scree plot suggest to extract? Explain your reasoning
# A: 3, 4, or 5, depending on the rules you adopt in decision making
# Use FA.Stats() function to request Chi-Square and RMSEA statistics, add a descriptive title
FA.Stats(R, n.factors=1:10, n.obs=360, main="RMSEA plot of 19 Psych Variables (n=360)") # Request Chi-Square and RMSEA stats
#### Question 3 ####
# How many factors does the Chi-Square criteria suggest to extract? Explain your reasoning
# A: 4, with 4 factors we can fail to reject the hypothesis of perfect fit at apha=.05
#### Question 4 ####
# How many factors does the RMSEA criteria suggest to extract? Explain your reasoning
# A: 4, with 4 factors the confidence interval for the point estimate includes zero
out <- MLFA(Correlation.Matrix = R, n.factors=4, n.obs=360) # conduct MLFA and collect all rotations in a single object
Loadings(out, cutoff=.3, num.digits=2)
Loadings(out, cutoff=.3, num.digits=2)
out <- MLFA(Correlation.Matrix = R, n.factors=2, n.obs=360) # conduct MLFA and collect all rotations in a single object
Loadings(out, cutoff=.3, num.digits=2)
=======
# I am going to read some things that people might say about their block. Each time I read one of these
# statements, please tell me if it is mostly true or mostly false about your block simply by saying "true" (2=MORE SOCIABLE) or "false" (1=LESS SOCIABLE).
# SCI1 - I think my block is a good place for me to live.
# SCI2 - People on this block do not share the same values. (reverse)
# SCI3 - My neighbors and I want the same things from the block.
# SCI4 - I can recognize most of the people who live on my block.
# SCI5 - I feel at home on this block.
# SCI6 - Very few of my neighbors know me. (reverse)
# SCI7 - I care about what my neighbors think of my actions.
# SCI8 - I have almost no influence over what this block is like. (reverse)
# SCI9 - If there is a problem on this block people who live here can get it solved.
# SCI10 - It is very important to me to live on this particular block.
# SCI11 - People on this block generally don't get along with each other. (reverse)
# SCI12 - I expect to live on this block for a long time.
View(ds)
# convert into factors and assign labels
lessmoreLevels<- c(1,2) # what numeric values should represent levels
lessmoreLabels<- c("LESS SOC", "MORE SOC") # what character strings should represent levels
# loop through all  variable names
for(i in  colnames(ds)){
ds[,i]<- factor(ds[,i], levels = lessmoreLevels,labels = lessmoreLabels)
}
strds[,1])
str(ds[,1])
ds <- na.omit(ds)
R <- cor(ds,use = "complete.obs")
R <- cor(ds)
>>>>>>> origin/master
#### SETUP ####
rm(list=ls(all=TRUE)) #Clear out variables from previous runs.
options("scipen"=10, "digits"=3) # control the decimal places in the output
# Install packages if necessary
# install.packages("psych")
# install.packages("corrgram")
# install.packages("plotrix")
# install.packages("sem")
# install.packages("Hmisc")
## load the packages
library(psych) # multipurpose for psychologist
library(corrgram) # for graphing correlation matrices
library(Hmisc)# multipurpose
library(sem) # structural equation modeling
library(reshape2) # data transformation
library(ggplot2) # general graphing
library(plotrix) # ploting matrix graphs
# Please consult the website of James Steiger (www.statpower.net) for all materials pertaining to this demonstration. ( See Psychology 312)
## load some custom functions
# Useful function for multivariate stats
source("http://statpower.net/Content/312/R%20Stuff/Steiger%20R%20Library%20Functions.txt")
# Functions to assist you in FA and SEM
source("http://statpower.net/Content/312/R%20Stuff/AdvancedFactorFunctions.txt")
# Functions by Dirk Enzmann to aid promax rotation
source("http://statpower.net/Content/312/R%20Stuff/fa.promax.R")
pathHome <- getwd()
pathFile <- file.path(pathHome,"Homework/LongPerkinsTime1SCI.csv")
#### Data prep ####
ds <- read.table(pathFile, sep=",", header=T) # read in the data
head(ds) # print the first few lines
str(ds) # examine the structure of the object
dim(ds)
nrow(ds)
<<<<<<< HEAD
# convert "." into missing values
ds[ds == "."] <- NA
ds[ds == "No"] <- 0
ds[ds == "Yes"] <- 1
# View(ds)
# # convert into factors and assign labels
# noyesLevels<- c(0,1) # what numeric values should represent levels
# noyesLabels<- c("NO", "YES") # what character strings should represent levels
# # loop through all  variable names
# for(i in  colnames(ds)){
#   ds[,i]<- factor(ds[,i], levels = noyesLevels,labels = noyesLabels)
# }
=======
# I am going to read some things that people might say about their block. Each time I read one of these
# statements, please tell me if it is mostly true or mostly false about your block simply by saying "true" (2=MORE SOCIABLE) or "false" (1=LESS SOCIABLE).
# SCI1 - I think my block is a good place for me to live.
# SCI2 - People on this block do not share the same values. (reverse)
# SCI3 - My neighbors and I want the same things from the block.
# SCI4 - I can recognize most of the people who live on my block.
# SCI5 - I feel at home on this block.
# SCI6 - Very few of my neighbors know me. (reverse)
# SCI7 - I care about what my neighbors think of my actions.
# SCI8 - I have almost no influence over what this block is like. (reverse)
# SCI9 - If there is a problem on this block people who live here can get it solved.
# SCI10 - It is very important to me to live on this particular block.
# SCI11 - People on this block generally don't get along with each other. (reverse)
# SCI12 - I expect to live on this block for a long time.
# View(ds)
# # convert into factors and assign labels
# lessmoreLevels<- c(1,2) # what numeric values should represent levels
# lessmoreLabels<- c("LESS SOC", "MORE SOC") # what character strings should represent levels
# # loop through all  variable names
# for(i in  colnames(ds)){
#   ds[,i]<- factor(ds[,i], levels = lessmoreLevels,labels = lessmoreLabels)
# }
# convert variables back into numeric
>>>>>>> origin/master
for(i in  colnames(ds)){
ds[,i]<- as.numeric(ds[,i])
}
# subset the data to keep only the row without any missing values
ds <- na.omit(ds)
<<<<<<< HEAD
# passing descriptive names to the variables
# varNames <- c("activity", "anxious", "quick", "noreason", "backgrnd", "cheerful", "late", "tired", "lively", "quickly", "thoughts", "reserved", "sensitive", "restless", "nosleep", "keepself", "nervous", "joke", "worry")
varNames <- c("ACTIVITY", "anxious", "QUICK", "noreason", "BACKGROUND", "cheerful", "late", "tired", "LIVELY", "QUICKLY", "THOUGHTS", "RESERVED", "sensitive", "restless", "nosleep", "KEEPSELF", "nervous", "JOKE", "worry")
names(ds) <- varNames
head(ds)
#### Examine correlations ####
# compute correlation matrix
=======
>>>>>>> origin/master
R <- cor(ds)
# Print the corrleation matrix
R
# print a correlogram of the correlation matrix using corrgram() function of the corrgram package, use default options
corrgram(R)
<<<<<<< HEAD
=======
corrgram(R)
>>>>>>> origin/master
# customize the correlogram so that the lower triangle gives pie graphs and upper triangle shows the numerical values for the correlation
corrgram(R,upper.panel=panel.conf,lower.panel=panel.pie)
# further customize the correlogram so that variable are ordered according to the PCA logic
corrgram(R,upper.panel=panel.conf,lower.panel=panel.pie, order = T)
<<<<<<< HEAD
#### Question 1 ####
# How many clusters does a visual inspection of the correlogram suggest?
# A: looks like two
#### Conduct factor analysis ####
# list the numerical values of the eigenvalues to be examined directly
eigen(R)$values
# Use Scree.Plot() function to request the graph of eigenvalues, add a descriptive title
Scree.Plot(R, main="Scree plot of 19 Psychological variables (n=360)") # plot the eigen values
#### Question 2 ####
# How many factors does the scree plot suggest to extract? Explain your reasoning
# A: 3, 4, or 5, depending on the rules you adopt in decision making
# Use FA.Stats() function to request Chi-Square and RMSEA statistics, add a descriptive title
FA.Stats(R, n.factors=1:10, n.obs=360, main="RMSEA plot of 19 Psych Variables (n=360)") # Request Chi-Square and RMSEA stats
#### Question 3 ####
# How many factors does the Chi-Square criteria suggest to extract? Explain your reasoning
# A: 4, with 4 factors we can fail to reject the hypothesis of perfect fit at apha=.05
#### Question 4 ####
# How many factors does the RMSEA criteria suggest to extract? Explain your reasoning
# A: 4, with 4 factors the confidence interval for the point estimate includes zero
out <- MLFA(Correlation.Matrix = R, n.factors=2, n.obs=360) # conduct MLFA and collect all rotations in a single object
Loadings(out, cutoff=.3, num.digits=2)
Loadings(out, cutoff=.3, num.digits=2)
out.4 <- MLFA(Correlation.Matrix = R, n.factors=4, n.obs=360) # conduct MLFA and collect all rotations in a single object
out.2 <- MLFA(Correlation.Matrix = R, n.factors=2, n.obs=360) # conduct MLFA and collect all rotations in a single object
Loadings(out.4, cutoff=.3, num.digits=2)
=======
Scree.Plot(R, main="Scree plot of Sence of Community (SOC) variables (n=575)") # plot the eigen values
FA.Stats(R, n.factors=1:5, n.obs=575, main="RMSEA plot of 19 Psych Variables (n=575)") # Request Chi-Square and RMSEA stats
>>>>>>> origin/master
<<<<<<< HEAD
cfa1.model <- specify.model("./Cases/CFA with R/Class Demo/CFA1.txt")
cfa1.model
cfa1.model <- specify.model("./Cases/CFA with R/Class Demo/CFA1.txt")
=======
??sem
>>>>>>> origin/master
rm(list=ls(all=TRUE)) #Clear out variables from previous runs.
options("scipen"=10, "digits"=5)
######### Set Up Working Directory!!
library(Hmisc)
library(sem)
library(corrgram)
library(psych)
library(sem)
library(ggplot2)
# Please consult the website of James Steiger (www.statpower.net) for all materials pertaining to this demonstration.
# Useful function for multivariate stats
source("http://statpower.net/Content/312/R%20Stuff/Steiger%20R%20Library%20Functions.txt")
# Functions to assist you in FA and SEM
source("http://statpower.net/Content/312/R%20Stuff/AdvancedFactorFunctions.txt")
# Functions by Dirk Enzmann to aid promax rotation
source("http://statpower.net/Content/312/R%20Stuff/fa.promax.R")
# Load Athletic data directly from James Stieger's website
AthleticsData <- read.csv("http://statpower.net/Content/312/Homework/AthleticsData.csv")
# attach(AthleticsData)
#          R            Correlation/Covariance matrix - R
#      F      F'        Grahm-Factors                 - F
#   VD1/2   D1/2V'      Principle Component patterns  - pcPattern
#   V     D     V'      Earhart-Young decomposition   - V, D
#      Rv = cv          Eigenvalues and Eigenvectors
R<-cor(AthleticsData) # correlation matrix R of variables in AthleticsData
R
<<<<<<< HEAD
cfa1.model <- specify.model("./Cases/CFA with R/Class Demo/CFA1.txt")
cfa1.model <- specifyModel("./Cases/CFA with R/Class Demo/CFA1.txt")
cfa1.model
cfa1.fit <- sem(cfa1.model, R, 1000)
summary(cfa1.fit)
summary(cfa1.fit)
??sem
a <- summary(cfa1.fit)
str(a)
RMSEA
a$RMSEA
a$AIC
summary(cfa1.fit)
mod.indices(cfa1.fit)
modIndices(cfa1.fit)
cfa2.model <- specifyModel("./Cases/CFA with R/Class Demo/CFA2.txt")
cfa2.model <- specifyModel("./Cases/CFA with R/Class Demo/CFA2.txt")
cfa2.fit <- sem(cfa2.model, R, 1000)
summary(cfa2.fit)
modIndices(cfa2.fit)
cfa3.model <- specifyModel("./Cases/CFA with R/Class Demo/CFA3.txt")
cfa3.fit <- sem(cfa3.model, R, 1000)
summary(cfa3.fit)
modIndices(cfa3.fit)
cfa4.model <- specifyModel("./Cases/CFA with R/Class Demo/CFA4.txt")
cfa4.fit <- sem(cfa4.model, R, 1000)
summary(cfa4.fit)
modIndices(cfa4.fit)
cfa4.fit
=======
# cfa1.model <- specify.model("./Cases/CFA with R/Class Demo/CFA1.txt")
cfa1.model <- specifyModel("./Cases/CFA with R/Class Demo/CFA1.txt")
cfa1.fit <- sem(cfa1.model, R, 1000)
summary(cfa1.fit)
a <- summary(cfa1.fit)
str(a)
a$RMSEA
<<<<<<< HEAD
rm(list=ls(all=TRUE)) #Clear out variables from previous runs.
options("scipen"=10, "digits"=5)
######### Set Up Working Directory!!
setwd(dir = "C:/Users/koval_000/Documents/533")
library(Hmisc) # matrix and utility functions
library(corrgram) # graphing correlation matrices
library(sem) # structural equation modeling
#### Resources ####
## Please consult the website of James Steiger ( www.statpower.net ) for all materials pertaining to this demonstration.
## For the demonstraction of factor analysis with 'sem' package see Steiger's tutorial entitled "CFA with R" ( http://statpower.net/Content/312/Handout/Confirmatory%20Factor%20Analysis%20with%20R.pdf )
## For the demonstration of FA with custom functions see Steiger's tutorial entitled "Advanced CFA with R" ( http://statpower.net/Content/312/Handout/Advanced%20Confirmatory%20Factor%20Analysis%20in%20R.pdf )
## For detailed discussion of 'sem' package see John Fox paper "Structural Equation Modeling in R with the sem Package" ( http://socserv.mcmaster.ca/jfox/Books/Companion/appendix/Appendix-SEMs.pdf )
## For 'sem' package documentation see http://cran.r-project.org/web/packages/sem/sem.pdf or http://www.rdocumentation.org/packages/sem
## For "Exploratory-Confirmatory" Approach see Karl Joreskog 1978 paper ( http://www.researchgate.net/profile/Karl_Joereskog/publication/24062332_Structural_analysis_of_covariance_and_correlation_matrices/links/0046352b8b078d34d6000000.pdf )
#### Custom functions ####
=======
<<<<<<< HEAD
>>>>>>> origin/master
=======
install.packages("semTools")
rm(list=ls(all=TRUE)) #Clear out variables from previous runs.
options("scipen"=10, "digits"=5)
######### Set Up Working Directory!!
library(Hmisc)
library(sem)
library(corrgram)
library(psych)
library(sem)
library(ggplot2)
library(semTools)
# Useful function for multivariate stats
>>>>>>> origin/master
source("http://statpower.net/Content/312/R%20Stuff/Steiger%20R%20Library%20Functions.txt")
# Functions to assist you in FA and SEM
source("http://statpower.net/Content/312/R%20Stuff/AdvancedFactorFunctions.txt")
# Functions by Dirk Enzmann to aid promax rotation
source("http://statpower.net/Content/312/R%20Stuff/fa.promax.R")
<<<<<<< HEAD
#### Data and Option prep ####
# Load Athletic data directly from James Stieger's website
AthleticsData <- read.csv("http://statpower.net/Content/312/Homework/AthleticsData.csv")
# attach(AthleticsData)
# R Correlation/Covariance matrix - R
# F F' Grahm-Factors - F
# VD1/2 D1/2V' Principle Component patterns -
# V D V' Earhart-Young decomposition - V, D
# Rv = cv Eigenvalues and Eigenvectors
R<-cor(AthleticsData) # correlation matrix R of variables in AthleticsData
R
round(cor(AthleticsData),2)
corrgram(x=R,order=TRUE,
main="Correlogram of Athletic Data",
upper.panel=panel.pie,
lower.panel=panel.shade)
## selection of availible fit/information indices
# opt <- options(fit.indices = c("GFI", "AGFI", "RMSEA", "NFI", "NNFI","CFI", "RNI", "IFI", "SRMR", "AIC", "AICc", "BIC", "CAIC"))
opt <- options(fit.indices= c("GFI","RMSEA"))
rm(list=ls(all=TRUE)) #Clear out variables from previous runs.
options("scipen"=10, "digits"=5)
######### Set Up Working Directory!!
setwd(dir = "C:/Users/koval_000/Documents/533")
library(Hmisc) # matrix and utility functions
library(corrgram) # graphing correlation matrices
library(sem) # structural equation modeling
#### Resources ####
## Please consult the website of James Steiger ( www.statpower.net ) for all materials pertaining to this demonstration.
## For the demonstraction of factor analysis with 'sem' package see Steiger's tutorial entitled "CFA with R" ( http://statpower.net/Content/312/Handout/Confirmatory%20Factor%20Analysis%20with%20R.pdf )
## For the demonstration of FA with custom functions see Steiger's tutorial entitled "Advanced CFA with R" ( http://statpower.net/Content/312/Handout/Advanced%20Confirmatory%20Factor%20Analysis%20in%20R.pdf )
## For detailed discussion of 'sem' package see John Fox paper "Structural Equation Modeling in R with the sem Package" ( http://socserv.mcmaster.ca/jfox/Books/Companion/appendix/Appendix-SEMs.pdf )
## For 'sem' package documentation see http://cran.r-project.org/web/packages/sem/sem.pdf or http://www.rdocumentation.org/packages/sem
## For "Exploratory-Confirmatory" Approach see Karl Joreskog 1978 paper ( http://www.researchgate.net/profile/Karl_Joereskog/publication/24062332_Structural_analysis_of_covariance_and_correlation_matrices/links/0046352b8b078d34d6000000.pdf )
#### Custom functions ####
=======
# Load Athletic data directly from James Stieger's website
AthleticsData <- read.csv("http://statpower.net/Content/312/Homework/AthleticsData.csv")
# attach(AthleticsData)
#          R            Correlation/Covariance matrix - R
#      F      F'        Grahm-Factors                 - F
#   VD1/2   D1/2V'      Principle Component patterns  - pcPattern
#   V     D     V'      Earhart-Young decomposition   - V, D
#      Rv = cv          Eigenvalues and Eigenvectors
R<-cor(AthleticsData) # correlation matrix R of variables in AthleticsData
R
cfa1.model <- specifyModel("./Cases/CFA with R/Class Demo/CFA1.txt")
cfa1.fit <- sem(cfa1.model, R, 1000)
summary(cfa1.fit)
R
cfa1.model <- specifyModel("./Cases/CFA with R/Class Demo/CFA1.txt")
cfa1.fit <- sem(cfa1.model, R, 1000)
rm(list=ls(all=TRUE)) #Clear out variables from previous runs.
options("scipen"=10, "digits"=5)
######### Set Up Working Directory!!
library(Hmisc)
library(sem)
library(corrgram)
library(psych)
library(sem)
library(ggplot2)
library(semTools)
# Please consult the website of James Steiger (www.statpower.net) for all materials pertaining to this demonstration.
# Useful function for multivariate stats
>>>>>>> origin/master
source("http://statpower.net/Content/312/R%20Stuff/Steiger%20R%20Library%20Functions.txt")
# Functions to assist you in FA and SEM
source("http://statpower.net/Content/312/R%20Stuff/AdvancedFactorFunctions.txt")
# Functions by Dirk Enzmann to aid promax rotation
source("http://statpower.net/Content/312/R%20Stuff/fa.promax.R")
<<<<<<< HEAD
#### Data and Option prep ####
# Load Athletic data directly from James Stieger's website
AthleticsData <- read.csv("http://statpower.net/Content/312/Homework/AthleticsData.csv")
# attach(AthleticsData)
# R Correlation/Covariance matrix - R
# F F' Grahm-Factors - F
# VD1/2 D1/2V' Principle Component patterns -
# V D V' Earhart-Young decomposition - V, D
# Rv = cv Eigenvalues and Eigenvectors
R<-cor(AthleticsData) # correlation matrix R of variables in AthleticsData
R
round(cor(AthleticsData),2)
corrgram(x=R,order=TRUE,
main="Correlogram of Athletic Data",
upper.panel=panel.pie,
lower.panel=panel.shade)
## selection of availible fit/information indices
# opt <- options(fit.indices = c("GFI", "AGFI", "RMSEA", "NFI", "NNFI","CFI", "RNI", "IFI", "SRMR", "AIC", "AICc", "BIC", "CAIC"))
opt <- options(fit.indices= c("-2LL", "GFI", "AGFI","RMSEA"))
pureCFA.fit.T <- QuickCFA(R=R, n.factors=3, n.obs=1000)
=======
# Load Athletic data directly from James Stieger's website
AthleticsData <- read.csv("http://statpower.net/Content/312/Homework/AthleticsData.csv")
# attach(AthleticsData)
#          R            Correlation/Covariance matrix - R
#      F      F'        Grahm-Factors                 - F
#   VD1/2   D1/2V'      Principle Component patterns  - pcPattern
#   V     D     V'      Earhart-Young decomposition   - V, D
#      Rv = cv          Eigenvalues and Eigenvectors
R<-cor(AthleticsData) # correlation matrix R of variables in AthleticsData
R
# cfa1.model <- specify.model("./Cases/CFA with R/Class Demo/CFA1.txt")
cfa1.model <- specifyModel("./Cases/CFA with R/Class Demo/CFA1.txt")
cfa1.fit <- sem(cfa1.model, R, 1000)
summary(cfa1.fit)
rm(list=ls(all=TRUE)) #Clear out variables from previous runs.
options("scipen"=10, "digits"=5)
######### Set Up Working Directory!!
library(Hmisc)
library(sem)
library(corrgram)
library(psych)
library(sem)
library(ggplot2)
# library(semTools)
# Please consult the website of James Steiger (www.statpower.net) for all materials pertaining to this demonstration.
# Useful function for multivariate stats
source("http://statpower.net/Content/312/R%20Stuff/Steiger%20R%20Library%20Functions.txt")
# Functions to assist you in FA and SEM
source("http://statpower.net/Content/312/R%20Stuff/AdvancedFactorFunctions.txt")
# Functions by Dirk Enzmann to aid promax rotation
source("http://statpower.net/Content/312/R%20Stuff/fa.promax.R")
# Load Athletic data directly from James Stieger's website
AthleticsData <- read.csv("http://statpower.net/Content/312/Homework/AthleticsData.csv")
# attach(AthleticsData)
#          R            Correlation/Covariance matrix - R
#      F      F'        Grahm-Factors                 - F
#   VD1/2   D1/2V'      Principle Component patterns  - pcPattern
#   V     D     V'      Earhart-Young decomposition   - V, D
#      Rv = cv          Eigenvalues and Eigenvectors
R<-cor(AthleticsData) # correlation matrix R of variables in AthleticsData
R
# cfa1.model <- specify.model("./Cases/CFA with R/Class Demo/CFA1.txt")
cfa1.model <- specifyModel("./Cases/CFA with R/Class Demo/CFA1.txt")
cfa1.fit <- sem(cfa1.model, R, 1000)
summary(cfa1.fit)
summary(cfa1.fit)
cfa1.fit
str(cfa1.fit)
cfa1.fit$objective
opt <- options(fit.indices= c("GFI","RMSEA"))
cfa1.fit <- sem(cfa1.model, R, 1000, opt)
summary(cfa1.fit, opt)
standardizedCoefficients(cfa1.fit)
R
a <- 616.48
rate1 <- 0.80293
a*rate1
+14.38
a*rate1 + 14.38
>>>>>>> 906266f8960fc37f6eb781427c59a737b7a55fa4
>>>>>>> origin/master
