<<<<<<< HEAD
# GGally::ggpairs(ds,columns = 2:ncol(ds))
## Finding Aptitude outlier
head(ds)
ds <- ds[order(ds$aptit,decreasing=T),]
head(ds)
## Replace outlier with missing
# ds$aptit[ds$aptit==44] <- NA
head(ds)
# GGally::ggpairs(ds,columns = 2:ncol(ds))
## Create outlier identification variable
# ds[,"outlier"]= ifelse(ds[,"aptit"]>=30, 1,0 )
# head(ds)
# ds$outlier[ds$aptit >=30] <- 1
# head(ds)
means <- colMeans(ds[,2:ncol(ds)])
means
covar <- cov(ds[,2:ncol(ds)])
covar
ds$mahal <- mahalanobis(ds[,2:ncol(ds)], means, covar)
ds <- ds[order(ds$mahal,decreasing=T),]
ds
ds[,"out"] <- ifelse(ds[,"mahal"]>=10 , "liar!", "Ok")
ds
GGally::ggpairs(ds,columns = 2:ncol(ds),)
GGally::ggpairs(ds,columns = 2:ncol(ds),color="out")
dsNew <- ds[ds$mahal==0,]
GGally::ggpairs(dsNew,columns = 2:ncol(dsNew))
ds[ds$mahal==0,]
# create an indicator of multivariate outliers
ds$mahal <- mahalanobis(ds[,2:ncol(ds)], means, covar)
ds <- ds[order(ds$mahal,decreasing=T),]
ds
ds[,"out"] <- ifelse(ds[,"mahal"]>=10 , "liar!", "Ok")
ds
# create an indicator of multivariate outliers
ds$mahal <- mahalanobis(ds[,2:ncol(ds)], means, covar)
ds <- ds[order(ds$mahal,decreasing=T),]
ds
ds[,"out"] <- ifelse(ds[,"mahal"]>=10 , "liar!", "Ok")
ds
dsNew <- ds[ds$mahal=="Ok",]
GGally::ggpairs(dsNew,columns = 2:ncol(dsNew))
dsNew
ds
dsNew <- ds[ds$out=="Ok",]
GGally::ggpairs(dsNew,columns = 2:ncol(dsNew))
GGally::ggpairs(dsNew,columns = 2:5)
g <- ggplot2::ggplot(ds, aes(x=Score))
g <- g + geom_bar()
g
g <- ggplot2::ggplot(ds, aes(x=score))
g <- g + geom_bar()
g
g <- ggplot2::ggplot(dsNew, aes(x=score))
g <- g + geom_bar()
g
## Bivariate Distribution
g <- ggplot(ds, aes(x=score,y=intel))
g <- g + geom_point(aes(color=outlier))
g
g <- ggplot(ds, aes(x=score,y=intel))
g <- g + geom_point()
g
g <- ggplot(dsNew, aes(x=score,y=intel))
g <- g + geom_point()
g
g <- ggplot2::ggplot(ds, aes(x=score))
g <- g + geom_boxplot(width=1, fill=NA, color="black", alpha=.5, outlier.colour="red")
g
g <- ggplot2::ggplot(ds, aes(y=score))
g <- g + geom_boxplot(width=1, fill=NA, color="black", alpha=.5, outlier.colour="red")
g
g <- ggplot2::ggplot(ds, aes(y=score))
g <- g + stat_boxplot(width=1, fill=NA, color="black", alpha=.5, outlier.colour="red")
g
g <- ggplot2::ggplot(ds, aes(x=score))
g <- g + stat_boxplot(width=1, fill=NA, color="black", alpha=.5, outlier.colour="red")
g
g <- ggplot2::ggplot(ds, aes(x=1,y=score))
g <- g + stat_boxplot(width=1, fill=NA, color="black", alpha=.5, outlier.colour="red")
g
head(ds)
dsL <- reshape2::melt(ds,id.vars="id" )
dsL <- reshape2::melt(ds[1:5,],id.vars="id", variable.name="measure" )
g <- ggplot2::ggplot(dsL, aes(x=measure,y=value))
g <- g + stat_boxplot(width=1, fill=NA, color="black", alpha=.5, outlier.colour="red")
g
str(dsL)
head(dsL)
table(dsL$value)
# remove all elements for a clean start
rm(list=ls(all=TRUE))
cat("\014")
## @knitr InstallPackage
# source("./Scripts/Utility/InstallPackages.R")
## @knitr LoadPackages
require(sas7bdat) # for inputting data
library(dplyr) # for general data manipulation
library(reshape2) # for data : wide <-> long
library(GGally)
library(plyr)
library(psych) # data summary + etc
library(ggplot2) # graphing
# library(nlme) # estimate fixed models | esp. gls()
# library(lme4) # estimate mixed models | esp. lmer()
# library(arm)  # process model objects
## @knitr DummyChunck
#### ds0 ####
## @knitr LoadDataInitial
pathDir <- getwd() # establish home directory
pathDs<- file.path(pathDir,"Data/AMA/ch3ex1.dat")
# record variable names from MPlus script
namesDs<- c( 'id','Exam_Score', 'Aptitude_Measure', 'Age_in_Years',
'Intelligence_Score', 'Attention_Span')
# ds <- read.table(pathDs,col.names = namesDs)
ds <- read.table(pathDs,header = TRUE)
## @knitr RenameVariables
ds <- plyr::rename(ds, replace=c("Exam_Score"="score",
'Aptitude_Measure' = "aptit",
'Age_in_Years' = "age",
'Intelligence_Score' = "intel",
'Attention_Span' = "atten"))
# ## @knitr Pairs0
# GGally::ggpairs(ds,columns = 2:ncol(ds))
# ## @knitr BasicTables
attach(ds)
table(aptit,score)
detach(ds)
# ## Finding Score outlier
head(ds)
ds <- ds[order(ds$score),]
head(ds)
ds <- ds[order(ds$score,decreasing=T),]
head(ds)
# ## Remove entire case
# ds <- ds[ds$score!=152,]
# head(ds)
## Replace outlier with missing
# ds$score[ds$score==152] <- NA
head(ds)
# ## @knitr Pairs1
# GGally::ggpairs(ds,columns = 2:ncol(ds))
## Finding Aptitude outlier
head(ds)
ds <- ds[order(ds$aptit,decreasing=T),]
head(ds)
## Replace outlier with missing
# ds$aptit[ds$aptit==44] <- NA
head(ds)
# GGally::ggpairs(ds,columns = 2:ncol(ds))
means <- colMeans(ds[,2:ncol(ds)])
means
covar <- cov(ds[,2:ncol(ds)])
covar
# create an indicator of multivariate outliers
ds$mahal <- mahalanobis(ds[,2:ncol(ds)], means, covar)
ds <- ds[order(ds$mahal,decreasing=T),]
ds
ds[,"out"] <- ifelse(ds[,"mahal"]>=10 , 1, 0)
ds
dsNew <- ds[ds$out==0,]
GGally::ggpairs(dsNew,columns = 2:5)
dsL <- reshape2::melt(ds[1:5,],id.vars="id", variable.name="measure" )
str(dsL)
head(dsL)
g <- ggplot2::ggplot(dsL, aes(x=measure,y=value))
g <- g + stat_boxplot(width=1, fill=NA, color="black", alpha=.5, outlier.colour="red")
g
View(dsL)
dsL <- reshape2::melt(ds[,1:5],id.vars="id", variable.name="measure" )
str(dsL)
head(dsL)
View(dsL)
str(dsL)
g <- ggplot2::ggplot(dsL, aes(x=measure,y=value))
g <- g + stat_boxplot(width=1, fill=NA, color="black", alpha=.5, outlier.colour="red")
g
g <- ggplot2::ggplot(dsL, aes(x=measure,y=value))
# g <- g + stat_boxplot(width=1, fill=NA, color="black", alpha=.5, outlier.colour="red")
g <- g + geom_boxplot(width=1, fill=NA, color="black", alpha=.5, outlier.colour="red")
g
dsL <- reshape2::melt(ds[,1:5],id.vars="id", variable.name="measure" )
str(dsL)
head(dsL)
g <- ggplot2::ggplot(dsL, aes(x=measure,y=value))
# g <- g + stat_boxplot(width=1, fill=NA, color="black", alpha=.5, outlier.colour="red")
g <- g + geom_boxplot(width=1, fill=NA, color="black", alpha=.5, outlier.colour="red")
g <- g + stat_summary(fun.y=mean, geom="point", fill="white", shape=21, size=4)
g
g <- ggplot2::ggplot(dsL, aes(x=measure,y=value))
# g <- g + stat_boxplot(width=1, fill=NA, color="black", alpha=.5, outlier.colour="red")
g <- g + geom_violin( adjust=1, alpha=.4 )
g <- g + geom_boxplot(width=1, fill=NA, color="black", alpha=.5, outlier.colour="red")
g <- g + stat_summary(fun.y=mean, geom="point", fill="white", shape=21, size=4)
g
g <- ggplot2::ggplot(dsL, aes(x=measure,y=value))
# g <- g + stat_boxplot(width=1, fill=NA, color="black", alpha=.5, outlier.colour="red")
g <- g + geom_violin( adjust=1, alpha=.4, fill="red" )
g <- g + geom_boxplot(width=1, fill=NA, color="black", alpha=.5, outlier.colour="red")
g <- g + stat_summary(fun.y=mean, geom="point", fill="white", shape=21, size=4)
g
g <- ggplot2::ggplot(dsL, aes(x=measure,y=value))
# g <- g + stat_boxplot(width=1, fill=NA, color="black", alpha=.5, outlier.colour="red")
g <- g + geom_violin( adjust=1, alpha=.4, fill="red" )
g <- g + geom_boxplot(width=.5, fill=NA, color="black", alpha=.5, outlier.colour="red")
g <- g + stat_summary(fun.y=mean, geom="point", fill="white", shape=21, size=4)
g
dsL <- reshape2::melt(dsNew[,1:5],id.vars="id", variable.name="measure" )
str(dsL)
head(dsL)
g <- ggplot2::ggplot(dsL, aes(x=measure,y=value))
# g <- g + stat_boxplot(width=1, fill=NA, color="black", alpha=.5, outlier.colour="red")
g <- g + geom_violin( adjust=1, alpha=.4, fill="red" )
g <- g + geom_boxplot(width=.5, fill=NA, color="black", alpha=.5, outlier.colour="red")
g <- g + stat_summary(fun.y=mean, geom="point", fill="white", shape=21, size=4)
g
dsNewZ <- ddply(dsNew,0,sd)
ddply(dsNew,0,sd)
dsNew
dsNewZ <- plyr::ddply(dsNew,c("score"), transform, x.std = scale(s))
dsNewZ <- plyr::ddply(dsNew,c("score"), transform, x.std = scale(score))
dsNewZ
dsNewZ <- plyr::ddply(dsNew, transform, x.std = scale(score))
scale(dsNew)
# remove all elements for a clean start
rm(list=ls(all=TRUE))
cat("\014")
## @knitr InstallPackage
# source("./Scripts/Utility/InstallPackages.R")
## @knitr LoadPackages
require(sas7bdat) # for inputting data
library(dplyr) # for general data manipulation
library(reshape2) # for data : wide <-> long
library(GGally)
library(plyr)
library(psych) # data summary + etc
library(ggplot2) # graphing
# library(nlme) # estimate fixed models | esp. gls()
# library(lme4) # estimate mixed models | esp. lmer()
# library(arm)  # process model objects
## @knitr DummyChunck
#### ds0 ####
## @knitr LoadDataInitial
pathDir <- getwd() # establish home directory
pathDs<- file.path(pathDir,"Data/AMA/ch3ex1.dat")
# record variable names from MPlus script
namesDs<- c( 'id','Exam_Score', 'Aptitude_Measure', 'Age_in_Years',
'Intelligence_Score', 'Attention_Span')
# ds <- read.table(pathDs,col.names = namesDs)
ds <- read.table(pathDs,header = TRUE)
## @knitr RenameVariables
ds <- plyr::rename(ds, replace=c("Exam_Score"="score",
'Aptitude_Measure' = "aptit",
'Age_in_Years' = "age",
'Intelligence_Score' = "intel",
'Attention_Span' = "atten"))
# ## @knitr Pairs0
# GGally::ggpairs(ds,columns = 2:ncol(ds))
# ## @knitr BasicTables
attach(ds)
table(aptit,score)
detach(ds)
# ## Finding Score outlier
head(ds)
ds <- ds[order(ds$score),]
head(ds)
ds <- ds[order(ds$score,decreasing=T),]
head(ds)
# ## Remove entire case
# ds <- ds[ds$score!=152,]
# head(ds)
## Replace outlier with missing
# ds$score[ds$score==152] <- NA
head(ds)
# ## @knitr Pairs1
# GGally::ggpairs(ds,columns = 2:ncol(ds))
## Finding Aptitude outlier
head(ds)
ds <- ds[order(ds$aptit,decreasing=T),]
head(ds)
## Replace outlier with missing
# ds$aptit[ds$aptit==44] <- NA
head(ds)
# GGally::ggpairs(ds,columns = 2:ncol(ds))
means <- colMeans(ds[,2:ncol(ds)])
means
covar <- cov(ds[,2:ncol(ds)])
covar
# create an indicator of multivariate outliers
ds$mahal <- mahalanobis(ds[,2:ncol(ds)], means, covar)
ds <- ds[order(ds$mahal,decreasing=T),]
ds
ds[,"out"] <- ifelse(ds[,"mahal"]>=10 , 1, 0)
ds
dsNew <- ds[ds$out==0,]
GGally::ggpairs(dsNew,columns = 2:5)
## @knitr DummyChunck
### Basic Graphs  ####
## @knitr LoadGraphThemes
baseSize <- 12 # set as the point of further reference
theme1 <- ggplot2::theme_bw(base_size=baseSize) +
ggplot2::theme(title=ggplot2::element_text(colour="gray20",size = baseSize+1)) +
ggplot2::theme(axis.text=ggplot2::element_text(colour="gray40", size=baseSize-2)) +
ggplot2::theme(axis.title=ggplot2::element_text(colour="gray40")) +
ggplot2::theme(panel.border = ggplot2::element_rect(colour="gray80")) +
ggplot2::theme(axis.ticks.length = grid::unit(0, "cm")) +
ggplot2::theme(text = element_text(size =baseSize+7))
## Univariate Distribution
g <- ggplot2::ggplot(ds, aes(x=score))
g <- g + geom_bar()
g
## Univariate Distribution without outliers
g <- ggplot2::ggplot(dsNew, aes(x=score))
g <- g + geom_bar()
g
head(ds)
## Univariate Distribution
dsL <- reshape2::melt(dsNew[,1:5],id.vars="id", variable.name="measure" )
str(dsL)
head(dsL)
g <- ggplot2::ggplot(dsL, aes(x=measure,y=value))
# g <- g + stat_boxplot(width=1, fill=NA, color="black", alpha=.5, outlier.colour="red")
g <- g + geom_violin( adjust=1, alpha=.4, fill="red" )
g <- g + geom_boxplot(width=.5, fill=NA, color="black", alpha=.5, outlier.colour="red")
g <- g + stat_summary(fun.y=mean, geom="point", fill="white", shape=21, size=4)
g
scale(dsNew)
dsNewZ <- scale(dsNew)
View(dsNewZ)
dsNewZ <- scale(dsNew)
dsL <- reshape2::melt(dsNewZ[,1:6],id.vars="id", variable.name="measure" )
str(dsL)
head(dsL)
g <- ggplot2::ggplot(dsL, aes(x=measure,y=value))
# g <- g + stat_boxplot(width=1, fill=NA, color="black", alpha=.5, outlier.colour="red")
g <- g + geom_violin( adjust=1, alpha=.4, fill="red" )
g <- g + geom_boxplot(width=.5, fill=NA, color="black", alpha=.5, outlier.colour="red")
g <- g + stat_summary(fun.y=mean, geom="point", fill="white", shape=21, size=4)
g
str(dsL)
dsNewZ <- as.data.frame(scale(dsNew))
dsL <- reshape2::melt(dsNewZ[,1:6],id.vars="id", variable.name="measure" )
str(dsL)
head(dsL)
dsNew
# remove all elements for a clean start
rm(list=ls(all=TRUE))
cat("\014")
## @knitr InstallPackage
# source("./Scripts/Utility/InstallPackages.R")
## @knitr LoadPackages
require(sas7bdat) # for inputting data
library(dplyr) # for general data manipulation
library(reshape2) # for data : wide <-> long
library(GGally)
library(plyr)
library(psych) # data summary + etc
library(ggplot2) # graphing
# library(nlme) # estimate fixed models | esp. gls()
# library(lme4) # estimate mixed models | esp. lmer()
# library(arm)  # process model objects
## @knitr DummyChunck
#### ds0 ####
## @knitr LoadDataInitial
pathDir <- getwd() # establish home directory
pathDs<- file.path(pathDir,"Data/AMA/ch3ex1.dat")
# record variable names from MPlus script
namesDs<- c( 'id','Exam_Score', 'Aptitude_Measure', 'Age_in_Years',
'Intelligence_Score', 'Attention_Span')
# ds <- read.table(pathDs,col.names = namesDs)
ds <- read.table(pathDs,header = TRUE)
## @knitr RenameVariables
ds <- plyr::rename(ds, replace=c("Exam_Score"="score",
'Aptitude_Measure' = "aptit",
'Age_in_Years' = "age",
'Intelligence_Score' = "intel",
'Attention_Span' = "atten"))
# ## @knitr Pairs0
# GGally::ggpairs(ds,columns = 2:ncol(ds))
# ## @knitr BasicTables
attach(ds)
table(aptit,score)
detach(ds)
# ## Finding Score outlier
head(ds)
ds <- ds[order(ds$score),]
head(ds)
ds <- ds[order(ds$score,decreasing=T),]
head(ds)
# ## Remove entire case
# ds <- ds[ds$score!=152,]
# head(ds)
## Replace outlier with missing
# ds$score[ds$score==152] <- NA
head(ds)
# ## @knitr Pairs1
# GGally::ggpairs(ds,columns = 2:ncol(ds))
## Finding Aptitude outlier
head(ds)
ds <- ds[order(ds$aptit,decreasing=T),]
head(ds)
## Replace outlier with missing
# ds$aptit[ds$aptit==44] <- NA
head(ds)
# GGally::ggpairs(ds,columns = 2:ncol(ds))
means <- colMeans(ds[,2:ncol(ds)])
means
covar <- cov(ds[,2:ncol(ds)])
covar
# create an indicator of multivariate outliers
ds$mahal <- mahalanobis(ds[,2:ncol(ds)], means, covar)
ds <- ds[order(ds$mahal,decreasing=T),]
ds
ds[,"out"] <- ifelse(ds[,"mahal"]>=10 , 1, 0)
ds
dsNew <- ds[ds$out==0,]
GGally::ggpairs(dsNew,columns = 2:5)
## @knitr DummyChunck
### Basic Graphs  ####
## @knitr LoadGraphThemes
baseSize <- 12 # set as the point of further reference
theme1 <- ggplot2::theme_bw(base_size=baseSize) +
ggplot2::theme(title=ggplot2::element_text(colour="gray20",size = baseSize+1)) +
ggplot2::theme(axis.text=ggplot2::element_text(colour="gray40", size=baseSize-2)) +
ggplot2::theme(axis.title=ggplot2::element_text(colour="gray40")) +
ggplot2::theme(panel.border = ggplot2::element_rect(colour="gray80")) +
ggplot2::theme(axis.ticks.length = grid::unit(0, "cm")) +
ggplot2::theme(text = element_text(size =baseSize+7))
## Univariate Distribution
g <- ggplot2::ggplot(ds, aes(x=score))
g <- g + geom_bar()
g
## Univariate Distribution without outliers
g <- ggplot2::ggplot(dsNew, aes(x=score))
g <- g + geom_bar()
g
head(ds)
dsL <- reshape2::melt(dsNew[,1:6],id.vars="id", variable.name="measure" )
str(dsL)
head(dsL)
g <- ggplot2::ggplot(dsL, aes(x=measure,y=value))
# g <- g + stat_boxplot(width=1, fill=NA, color="black", alpha=.5, outlier.colour="red")
g <- g + geom_violin( adjust=1, alpha=.4, fill="red" )
g <- g + geom_boxplot(width=.5, fill=NA, color="black", alpha=.5, outlier.colour="red")
g <- g + stat_summary(fun.y=mean, geom="point", fill="white", shape=21, size=4)
g
dsNewZ <- as.data.frame(scale(dsNew))
dsL <- reshape2::melt(dsNewZ[,1:6],id.vars="id", variable.name="measure" )
str(dsL)
head(dsL)
g <- ggplot2::ggplot(dsL, aes(x=measure,y=value))
# g <- g + stat_boxplot(width=1, fill=NA, color="black", alpha=.5, outlier.colour="red")
g <- g + geom_violin( adjust=1, alpha=.4, fill="red" )
g <- g + geom_boxplot(width=.5, fill=NA, color="black", alpha=.5, outlier.colour="red")
g <- g + stat_summary(fun.y=mean, geom="point", fill="white", shape=21, size=4)
g
dsL <- reshape2::melt(ds[,1:6],id.vars="id", variable.name="measure" )
str(dsL)
head(dsL)
g <- ggplot2::ggplot(dsL, aes(x=measure,y=value))
# g <- g + stat_boxplot(width=1, fill=NA, color="black", alpha=.5, outlier.colour="red")
g <- g + geom_violin( adjust=1, alpha=.4, fill="red" )
g <- g + geom_boxplot(width=.5, fill=NA, color="black", alpha=.5, outlier.colour="red")
g <- g + stat_summary(fun.y=mean, geom="point", fill="white", shape=21, size=4)
g
dsNewZ <- as.data.frame(scale(dsNew))
dsL <- reshape2::melt(dsNewZ[,1:6],id.vars="id", variable.name="measure" )
str(dsL)
head(dsL)
g <- ggplot2::ggplot(dsL, aes(x=measure,y=value))
# g <- g + stat_boxplot(width=1, fill=NA, color="black", alpha=.5, outlier.colour="red")
g <- g + geom_violin( adjust=1, alpha=.4, fill="red" )
g <- g + geom_boxplot(width=.5, fill=NA, color="black", alpha=.5, outlier.colour="red")
g <- g + stat_summary(fun.y=mean, geom="point", fill="white", shape=21, size=4)
g
g <- ggplot(ds, aes(x=score,y=intel))
g <- g + geom_point()
g
g <- ggplot(dsNew, aes(x=score,y=intel))
g <- g + geom_point()
g
g <- ggplot(ds, aes(x=score,y=intel))
g <- g + geom_point()
g
g <- ggplot(dsNew, aes(x=score,y=intel))
g <- g + geom_point()
g
#### Prep ####
# remove all elements for a clean start
rm(list=ls(all=TRUE))
cat("\014")
## @knitr InstallPackage
# source("./Scripts/Utility/InstallPackages.R")
## @knitr LoadPackages
require(sas7bdat) # for inputting data
library(dplyr) # for general data manipulation
library(reshape2) # for data : wide <-> long
library(GGally) # graphing
library(plyr) # data manipulation
library(psych) # data summary + etc
library(ggplot2) # graphing
## @knitr DummyChunck
#### ds0 ####
## @knitr LoadDataInitial
pathDir <- getwd() # establish home directory
pathDs<- file.path(pathDir,"Data/AMA/ch3ex2.dat")
# record variable names from MPlus script
namesDs<- c( 'id','Exam_Score', 'Aptitude_Measure', 'Age_in_Years',
'Intelligence_Score', 'Attention_Span')
# ds <- read.table(pathDs,col.names = namesDs)
ds <- read.table(pathDs,header = TRUE)
View(ds)
=======
sumv %*% xbar
N <- nrow(X)
sumv <- unit(N)
sumv
P <- sumv%*%t(sumv)/N
P
dX <- X - (P %*% X)
dX
(P %*% X)
sumv %*% xbar
X
sumv %*% x
sumv
x
rm(list=ls(all=TRUE)) # cleans the environment
cat("\014") # clean console
## Refresh of statistic basics:
## Linear Transformations, Means, Deviations
# Enter a vector named X containing numbers 1, 2, 3, 4, and 5
X <- c(1, 2, 3, 4, 5)
# Create a linear tranformation Y = bX + a, where b = 2,  a = 5
Y <- 2 * X + 5
Y
# Compute mean of X
mean(X)
# Linear tranform of the mean : bX + a, where b = 2,  a = 5
2 * mean(X) + 5
# Compute mean of Y
mean(Y)
# Compute Deviation Score of X named dx
dx <- X - mean(X)
# Variance
var(X)
# Standard Deviation
sd(X)
## Activity #1
## Demonstrate the effect of linear transformation on variance and standard deviation
## Operations with vectors and matrices
# Enter data by row
A <- matrix(c(1,2,3,4,5,6),2,3,byrow=FALSE)
A
B <- matrix(c(.1,.2,.3,.4,.5,.6),2,3,byrow=FALSE)
B
a <- matrix(c(1,2,3,4,5,6),6,1)
a
# Retreive data from matrices
A[1,2]
A[2,3]
A[2,]
A[,2]
A[,2:3]
## Demonstrate Communtative law
# Particular example
left <- A + B
right <- B + A
print(left,right)
all.equal(left, right)
# A more general  demonstration with simulated numbers
A <- matrix(round(rnorm(6,4,2)),2,3)
B <- matrix(round(rnorm(6,4,2)),2,3)
left <- A + B
right <- B + A
print(left,right)
all.equal(left, right)
## Demonstrate Associative law (HM1)
## Demonstrate Distributive law (HM1)
## Scalar multiplication
A <- matrix(c(1,0,2,5), 2,2)
A
2*A
# 2A = A2
left <- 2 * A
right <- A * 2
print(left,right)
all.equal(left, right)
##  Transposing matrices: Properties
A
t(A)
t(t(A))
# Demonstrate that (A’)’ = A
all.equal(A,t(tA))
## Activity : Demonstrate Key properties of the transpose
# Demonstrate that (cA)’ = cA’
all.equal( t(2*A), 2*t(A) )
# Demonstrate that (A + B)’ =  A’ + B’
all.equal( t(A + B), t(A) + t(B))
# Demonstrate that (AB)’ = B’A’
C <- matrix(round(rnorm(6,4,2)),2,3)
D <- matrix(round(rnorm(6,4,2)),3,2)
all.equal( t(C%*%D), t(D) %*% t(C)) # see matrix multiplication
## Demonstrate 3 rules of matrix multiplication (HM1)
## Vector by Vector multiplication
a <- c(1,2,5)
b <- c(2,4,3)
a
b
# Elementwise multiplication of a and b
a * b
# Adding the results of elementwise multiplication of a and b
sum(a*b)
# The previous two operations can be replicated by
# Matrix multiplation of a and b
a%*%b
### in Class STOPPED here
# Change numeric vectors into matrices by assigning  dimension attribute
dim(a) <- c(1,3)
dim(b) <- c(3,1)
# Post multiply a by b (matrix)
a%*%b
# Pre multiply a by b (matrix)
b%*%a
## Matrix by Matrix Multiplication
A <- matrix( c(1,0,2,5), 2,2, byrow=FALSE)
B <- matrix(c(-1,-2,4,3),2,2,byrow=F)
A
B
# Pre multiply B by A
A %*% B
# Post multiply B by A
B %*% A
## Matrix Division : Inverses
A <- matrix( c(1,3,3,9,6,5,9,1,8), 3,3, byrow=FALSE)
A
# Find the inverse of A
solve(A)
# Verify : AA^-1 should be identity
A %*% solve(A)
zapsmall(A %*% solve(A))
round(A %*% solve(A))
B <- matrix( c(1, 2,3, 0,1,4,5,6,0), 3,3, byrow=TRUE)
solve(B)
## Slide 17
## Possible Activity: using A and x matrices on page 40 (AMA) replicate the quadratic form (2.22)
## Slide 18
## Inverses and their properties
## Let
A <- matrix( c(1,3,3,9,6,5,9,1,8), 3,3, byrow=FALSE)
B <- matrix( c(1, 2,3, 0,1,4,5,6,0), 3,3, byrow=TRUE)
# Demonstrate:
# AA^-1 = I = A^-1A
left <- A %*% solve(A)
right <- solve(A) %*% A
all.equal(left,right)
# (AB)^-1 =  (B^-1)(A^-1)
left <- solve(A %*% B)
right <- solve(B) %*% solve(A)
all.equal(left,right)
# (A^-1)^-1 = A
left <- solve(solve(A))
right <- A
all.equal(left,right)
# (A')^-1 = (A^-1)'
left <- solve(t(A))
right <- t(solve(A))
all.equal(left,right)
## Determinants and their properties
## Let
A <- matrix( c(1,3,3,9,6,5,9,1,8), 3,3, byrow=FALSE)
B <- matrix( c(1, 2,3, 0,1,4,5,6,0), 3,3, byrow=TRUE)
# Find the determinant of A
det(A)
# Demonstrate:
# |A'| = |A|
left  <- det(t(A))
right <- det(A)
all.equal(left, right)
# |A^-1| = 1/|A|
left  <- det(solve(A))
right <- 1/det(A)
print(c(left,right))
all.equal(left, right)
# |AB| = |A||B|
left  <- det (A %*% B)
right <- det(A) * det(B)
print(c(left,right))
all.equal(left, right)
## slide 25
## The Trace
## Let
A <- matrix( c(1,3,3,9,6,5,9,1,8), 3,3, byrow=FALSE)
B <- matrix( c(1, 2,3, 0,1,4,5,6,0), 3,3, byrow=TRUE)
# Find the trace of A
sum(diag(A))
# Define function named "trace" that finds the trace of the matrix that you pass to the function
trace <- function(x){  return(sum(diag(x)))  }
# Pass matrix A to function "trace"
trace(A)
# Demonstrate:
# Tr(A + B) = Tr(A) + Tr(B)
left <- trace(A + B)
right <- trace(A) + trace(B)
print(c(left,right))
all.equal(left, right)
# Tr(A) = Tr(A’)
left <- trace(A)
right <- trace(t(A))
print(c(left,right))
all.equal(left, right)
# Tr(cA) = c Tr(A)
left <- trace(3*A)
right <- 3 * trace(A)
print(c(left,right))
all.equal(left, right)
## Summation v. Matrix
# Let (Matrix from AMA text, page 11 and 32)
X <- matrix(c(
45, 55, 47, 1, 3, 33,
51, 54, 57, 0, 1, 23,
40, 51, 46, 1, 2, 43,
49, 45, 48, 0, 3, 42),4,6, byrow=TRUE)
X
#create a function named "unit" that creates a summation vector (in fact, a matrix of 1s of the order (1,n), where n is the argument to pass to the function, representing the length of the vector.
unit <- function(n){matrix(rep(1,n),n,1)}
# using function "unit" create a a unit vector of size 4
unit(4)
# using function "unit" create a unity vector of size 6
unit(6)
## Slide 26
# pre-multiplying by a summation vector
# summary over individuals for each variable
t(unit(4)) %*% X
## Slide 27
# post-multiplying by a summation vector
#  summary for each individuals over all variables
X %*% unit(6)
# Select only test scores using a dummy vector
# create a vector of dummy weights
w <- c(1,1,1,0,0,0)
# post-multiplying by a weight vector
Y <- X %*% w
Y
# slide 28
# Compute the mean using the summation vector
Xbar <- t(unit(4)) %*% X / nrow(X)
Xbar
mean(X[,1])
# slide 29
# Converting to deviation scores
X
x <- X[,1]
x
xbar <- x - mean(x)
xbar
sumv <- unit(nrow(x))
sumv <- unit(nrow(x))
nrow(x)
X
x <- X[,1]
x
xbar <- x - mean(x)
xbar
x
nrow(x)
rm(list=ls(all=TRUE)) # cleans the environment
cat("\014") # clean console
## Refresh of statistic basics:
## Linear Transformations, Means, Deviations
# Enter a vector named X containing numbers 1, 2, 3, 4, and 5
X <- c(1, 2, 3, 4, 5)
# Create a linear tranformation Y = bX + a, where b = 2,  a = 5
Y <- 2 * X + 5
Y
# Compute mean of X
mean(X)
# Linear tranform of the mean : bX + a, where b = 2,  a = 5
2 * mean(X) + 5
# Compute mean of Y
mean(Y)
# Compute Deviation Score of X named dx
dx <- X - mean(X)
# Variance
var(X)
# Standard Deviation
sd(X)
## Activity #1
## Demonstrate the effect of linear transformation on variance and standard deviation
## Operations with vectors and matrices
# Enter data by row
A <- matrix(c(1,2,3,4,5,6),2,3,byrow=FALSE)
A
B <- matrix(c(.1,.2,.3,.4,.5,.6),2,3,byrow=FALSE)
B
a <- matrix(c(1,2,3,4,5,6),6,1)
a
# Retreive data from matrices
A[1,2]
A[2,3]
A[2,]
A[,2]
A[,2:3]
## Demonstrate Communtative law
# Particular example
left <- A + B
right <- B + A
print(left,right)
all.equal(left, right)
# A more general  demonstration with simulated numbers
A <- matrix(round(rnorm(6,4,2)),2,3)
B <- matrix(round(rnorm(6,4,2)),2,3)
left <- A + B
right <- B + A
print(left,right)
all.equal(left, right)
## Demonstrate Associative law (HM1)
## Demonstrate Distributive law (HM1)
## Scalar multiplication
A <- matrix(c(1,0,2,5), 2,2)
A
2*A
# 2A = A2
left <- 2 * A
right <- A * 2
print(left,right)
all.equal(left, right)
##  Transposing matrices: Properties
A
t(A)
t(t(A))
# Demonstrate that (A’)’ = A
all.equal(A,t(tA))
## Activity : Demonstrate Key properties of the transpose
# Demonstrate that (cA)’ = cA’
all.equal( t(2*A), 2*t(A) )
# Demonstrate that (A + B)’ =  A’ + B’
all.equal( t(A + B), t(A) + t(B))
# Demonstrate that (AB)’ = B’A’
C <- matrix(round(rnorm(6,4,2)),2,3)
D <- matrix(round(rnorm(6,4,2)),3,2)
all.equal( t(C%*%D), t(D) %*% t(C)) # see matrix multiplication
## Demonstrate 3 rules of matrix multiplication (HM1)
## Vector by Vector multiplication
a <- c(1,2,5)
b <- c(2,4,3)
a
b
# Elementwise multiplication of a and b
a * b
# Adding the results of elementwise multiplication of a and b
sum(a*b)
# The previous two operations can be replicated by
# Matrix multiplation of a and b
a%*%b
### in Class STOPPED here
# Change numeric vectors into matrices by assigning  dimension attribute
dim(a) <- c(1,3)
dim(b) <- c(3,1)
# Post multiply a by b (matrix)
a%*%b
# Pre multiply a by b (matrix)
b%*%a
## Matrix by Matrix Multiplication
A <- matrix( c(1,0,2,5), 2,2, byrow=FALSE)
B <- matrix(c(-1,-2,4,3),2,2,byrow=F)
A
B
# Pre multiply B by A
A %*% B
# Post multiply B by A
B %*% A
## Matrix Division : Inverses
A <- matrix( c(1,3,3,9,6,5,9,1,8), 3,3, byrow=FALSE)
A
# Find the inverse of A
solve(A)
# Verify : AA^-1 should be identity
A %*% solve(A)
zapsmall(A %*% solve(A))
round(A %*% solve(A))
B <- matrix( c(1, 2,3, 0,1,4,5,6,0), 3,3, byrow=TRUE)
solve(B)
## Slide 17
## Possible Activity: using A and x matrices on page 40 (AMA) replicate the quadratic form (2.22)
## Slide 18
## Inverses and their properties
## Let
A <- matrix( c(1,3,3,9,6,5,9,1,8), 3,3, byrow=FALSE)
B <- matrix( c(1, 2,3, 0,1,4,5,6,0), 3,3, byrow=TRUE)
# Demonstrate:
# AA^-1 = I = A^-1A
left <- A %*% solve(A)
right <- solve(A) %*% A
all.equal(left,right)
# (AB)^-1 =  (B^-1)(A^-1)
left <- solve(A %*% B)
right <- solve(B) %*% solve(A)
all.equal(left,right)
# (A^-1)^-1 = A
left <- solve(solve(A))
right <- A
all.equal(left,right)
# (A')^-1 = (A^-1)'
left <- solve(t(A))
right <- t(solve(A))
all.equal(left,right)
## Determinants and their properties
## Let
A <- matrix( c(1,3,3,9,6,5,9,1,8), 3,3, byrow=FALSE)
B <- matrix( c(1, 2,3, 0,1,4,5,6,0), 3,3, byrow=TRUE)
# Find the determinant of A
det(A)
# Demonstrate:
# |A'| = |A|
left  <- det(t(A))
right <- det(A)
all.equal(left, right)
# |A^-1| = 1/|A|
left  <- det(solve(A))
right <- 1/det(A)
print(c(left,right))
all.equal(left, right)
# |AB| = |A||B|
left  <- det (A %*% B)
right <- det(A) * det(B)
print(c(left,right))
all.equal(left, right)
## slide 25
## The Trace
## Let
A <- matrix( c(1,3,3,9,6,5,9,1,8), 3,3, byrow=FALSE)
B <- matrix( c(1, 2,3, 0,1,4,5,6,0), 3,3, byrow=TRUE)
# Find the trace of A
sum(diag(A))
# Define function named "trace" that finds the trace of the matrix that you pass to the function
trace <- function(x){  return(sum(diag(x)))  }
# Pass matrix A to function "trace"
trace(A)
# Demonstrate:
# Tr(A + B) = Tr(A) + Tr(B)
left <- trace(A + B)
right <- trace(A) + trace(B)
print(c(left,right))
all.equal(left, right)
# Tr(A) = Tr(A’)
left <- trace(A)
right <- trace(t(A))
print(c(left,right))
all.equal(left, right)
# Tr(cA) = c Tr(A)
left <- trace(3*A)
right <- 3 * trace(A)
print(c(left,right))
all.equal(left, right)
## Summation v. Matrix
# Let (Matrix from AMA text, page 11 and 32)
X <- matrix(c(
45, 55, 47, 1, 3, 33,
51, 54, 57, 0, 1, 23,
40, 51, 46, 1, 2, 43,
49, 45, 48, 0, 3, 42),4,6, byrow=TRUE)
X
#create a function named "unit" that creates a summation vector (in fact, a matrix of 1s of the order (1,n), where n is the argument to pass to the function, representing the length of the vector.
unit <- function(n){matrix(rep(1,n),n,1)}
# using function "unit" create a a unit vector of size 4
unit(4)
# using function "unit" create a unity vector of size 6
unit(6)
## Slide 26
# pre-multiplying by a summation vector
# summary over individuals for each variable
t(unit(4)) %*% X
# create a vector of dummy weights
w <- c(1,1,1,0,0,0)
# post-multiplying by a weight vector
Y <- X %*% w
Y
X <- c(4, 7, 2, 5, 8)
X
dX <- X - mean(X)
dX
zX <- dX/sd(X)
zX
var(zX)
mean(zX)
ltX <- zX * 2 + median(X)
ltX
round((ltX))
ggpairs(iris)
library(GGally)
GGally::ggpairs(iris)
head(iris)
GGally::ggpairs(iris, group=Species)
GGally::ggpairs(iris, color="Species")
mtcars %>%
ggvis(~wt, ~mpg,
size := input_slider(10, 100),
opacity := input_slider(0, 1)
) %>%
layer_points()
library(Hmisc)
library(psych)
library(colorspace)
library(corrgram)
library(ggplot2)
library(reshape2)
library(ggvis)
library(GGally)
mtcars %>%
ggvis(~wt, ~mpg,
size := input_slider(10, 100),
opacity := input_slider(0, 1)
) %>%
layer_points()
# remove all elements for a clean start
rm(list=ls(all=TRUE))
cat("\014")
data()
head(iris)
mtcars %>%
ggvis(~wt, ~mpg,
size := input_slider(10, 100),
opacity := input_slider(0, 1)
)
>>>>>>> origin/master
