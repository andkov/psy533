}else{ v <- c(n.factors[i],pvar,NA,df,NA,NA,NA,NA)}
res[i,] <- v
}
colnames(res)=c("Factors","Cum.Eigen","Chi-Square","Df","p.value",
"RMSEA.Pt","RMSEA.Lo","RMSEA.Hi")
plotCI(n.factors,res[,6],li = res[,7],ui=res[,8],
ylab="RMSEA",xlab="Number of Factors",main=main,
sub=sub,xaxt="n")
lines(n.factors,res[,6],col="blue")
abline(h=0,col="black",lty=3)
axis(1,n.factors)
abline(h=RMSEA.cutoff,col="red",lty=2)
return(res)
}
FA.Stats(R,n.obs=575, n.factors=1:5,conf=.90,
maxit=1000,RMSEA.cutoff=NULL,
main="Block Questionnaire RMSEA Plot",sub=NULL)
#### Question 3 ####  (1)
# How many factors does the Chi-Square criteria suggest to extract? Explain your reasoning
# A: The chi-square criteria indicates that a 4-factor model is significantly different than a perfect-fit model (p = 0.02). When I changed the number of factors to 5 it produced a p value of 0.137. This suggests that a 5-factor model is more appropriate. However, it is important to note that because our sample size is so large (n = 575), the chi-square criteria is more likely to reject appropriate models.
#### Question 4 ####  (1)
# How many factors does the RMSEA criteria suggest to extract? Explain your reasoning
# A: The RMSEA criteria suggests to extract 4 factors, because the confidence interval ranges from 0.0108 to 0.0511. When the RMSEA is between 0.05 and 0.08 it indicates there is a reasonable error of approximation. The RMSEA likely accepted the 4-factor model because it favors simpler models and it takes sample size into account.
# conduct MLFA and collect all rotations in a single object
GPForth <- function(A,Tmat=diag(ncol(A)),method="varimax",...){
al <- 1
L <- A %*% Tmat
VgQ <- get(paste("vgQ",method,sep="."))(L,...)
G <- crossprod(A,VgQ$Gq)
f <- VgQ$f
Table <- NULL
for (iter in 0:500){
M <- crossprod(Tmat,G)
S <- (M+t(M))/2
Gp <- G - Tmat %*% S
s <- sqrt(sum(diag(crossprod(Gp))))
Table <- rbind(Table,c(iter,f,log10(s),al))
if (s < 1e-5)
break
al <- 2*al
for (i in 0:10){
X <- Tmat - al * Gp
UDV <- svd(X)
Tmatt <- UDV$u %*% t(UDV$v)
L <- A %*% Tmatt
VgQt <- get(paste("vgQ",method,sep="."))(L,...)
if (VgQt$f < (f-.5*s^2*al))
break
al <- al/2
}
Tmat <- Tmatt
f <- VgQt$f
G <- crossprod(A,VgQt$Gq)
}
Th <- Tmat
Lh <- L
method <- VgQ$Method
orthogonal <- T
## Added by Steiger
colnames(Table) <- c("Iteration", "Function", "Log10(s)","Alpha")
##
return(list(Lh=Lh,Th=Th,Table=Table,method=method,orthogonal=orthogonal))
}
GPFoblq <- function(A,Tmat=diag(ncol(A)),method="quartimin",...){
al <- 1
L <- A %*% t(solve(Tmat))
VgQ <- get(paste("vgQ",method,sep="."))(L,...)
G <- -t(t(L) %*% VgQ$Gq %*% solve(Tmat))
f <- VgQ$f
Table <- NULL
for (iter in 0:500){
Gp <- G-Tmat %*% diag(apply(Tmat*G,2,sum))
s <- sqrt(sum(diag(crossprod(Gp))))
Table <- rbind(Table,c(iter,f,log10(s),al))
if (s < 1e-5)
break
al <- 2*al
for (i in 0:10){
X <- Tmat-al*Gp
v <- 1/sqrt(apply(X^2,2,sum))
Tmatt <- X %*% diag(v)
L <- A %*% t(solve(Tmatt))
VgQt <- get(paste("vgQ",method,sep="."))(L,...)
if (VgQt$f < (f-.5*s^2*al))
break
al <- al/2
}
Tmat <- Tmatt
f <- VgQt$f
G <- -t(t(L) %*% VgQt$Gq %*% solve(Tmatt))
}
Th <- Tmat
Lh <- L
Phi <- t(Tmat) %*% Tmat
method <- VgQ$Method
orthogonal <- F
return(list(Lh=Lh,Phi=Phi,Th=Th,Table=Table,method=method,orthogonal=orthogonal))
}
vgQ.quartimin <- function(L){
Method="Quartimin"
L2 <- L^2
k <- ncol(L)
M <- matrix(1,k,k)-diag(k)
f <- sum(L2 * (L2 %*% M))/4
Gq <- L * (L2 %*% M)
return(list(Gq=Gq,f=f,Method=Method))
}
vgQ.oblimin <- function(L,gam=0){
Method <- paste("Oblimin g=",gam,sep="")
if (gam == 0) Method <- "Oblimin Quartimin"
if (gam == .5) Method <- "Oblimin Biquartimin"
if (gam == 1) Method <- "Oblimin Covarimin"
k <- ncol(L)
p <- nrow(L)
N <- matrix(1,k,k)-diag(k)
f <- sum(L^2 * (diag(p)-gam*matrix(1/p,p,p)) %*% L^2 %*% N)/4
Gq <- L * ((diag(p)-gam*matrix(1/p,p,p)) %*% L^2 %*% N)
return(list(Gq=Gq,f=f,Method=Method))
}
vgQ.target <- function(L,Target){
Method <- "Target rotation"
# Needs Target matrix, e.g.  Target <- matrix(c(rep(9,4),rep(0,8),rep(9,4)),8)
f <- sum((L-Target)^2)
Gq <- 2*(L-Target)
return(list(Gq=Gq,f=f,Method=Method))
}
vgQ.pst <- function(L,W,Target){
Method <- "Partially specified target"
# Needs weight matrix W with 1's at specified values, 0 otherwise
# e.g. W = matrix(c(rep(1,4),rep(0,8),rep(1,4)),8).
# When W has only 1's this is procrustes rotation
# Needs a Target matrix Target with hypothesized factor loadings.
# e.g. Target = matrix(0,8,2)
Btilde <- W * Target
f <- sum((W*L-Btilde)^2)
Gq <- 2*(W*L-Btilde)
return(list(Gq=Gq,f=f,Method=Method))
}
vgQ.oblimax <- function(L){
Method <- "Oblimax"
f <- -(log(sum(L^4))-2*log(sum(L^2)))
Gq <- -(4*L^3/(sum(L^4))-4*L/(sum(L^2)))
return(list(Gq=Gq,f=f,Method=Method))
}
vgQ.entropy <- function(L){
Method <- "Minimum entropy"
f <- -sum(L^2 * log(L^2 + (L^2==0)))/2
Gq <- -(L * log(L^2 + (L^2==0)) + L)
return(list(Gq=Gq,f=f,Method=Method))
}
vgQ.quartimax <- function(L){
Method <- "Quartimax"
f <- -sum(diag(crossprod(L^2)))/4
Gq <- -L^3
return(list(Gq=Gq,f=f,Method=Method))
}
vgQ.varimax <- function(L){
Method <- "Varimax"
QL <- sweep(L^2,2,apply(L^2,2,mean),"-")
f <- -sqrt(sum(diag(crossprod(QL))))^2/4
Gq <- -L * QL
return(list(Gq=Gq,f=f,Method=Method))
}
vgQ.simplimax <- function(L,k=nrow(L)){
Method <- "Simplimax"
# m: Number of close to zero loadings
Imat <- sign(L^2 <= sort(L^2)[k])
f <- sum(Imat*L^2)
Gq <- 2*Imat*L
return(list(Gq=Gq,f=f,Method=Method))
}
vgQ.bentler <- function(L){
Method <- "Bentler's criterion"
L2 <- L^2
M <- crossprod(L2)
D <- diag(diag(M))
f <- -(log(det(M))-log(det(D)))/4
Gq <- -L * (L2 %*% (solve(M)-solve(D)))
return(list(Gq=Gq,f=f,Method=Method))
}
vgQ.tandemI <- function(L){  # Tandem Criterion, Comrey, 1967.
Method <- "Tandem I"
LL <- (L %*% t(L))
LL2 <- LL^2
f <- -sum(diag(crossprod(L^2, LL2 %*% L^2)))
Gq1 <- 4 * L *(LL2 %*% L^2)
Gq2 <- 4 * (LL * (L^2 %*% t(L^2))) %*% L
Gq <- -Gq1 - Gq2
return(list(Gq=Gq,f=f,Method=Method))
}
vgQ.tandemII <- function(L){  # Tandem Criterion, Comrey, 1967.
Method <- "Tandem II"
LL <- (L %*% t(L))
LL2 <- LL^2
f <- sum(diag(crossprod(L^2, (1-LL2) %*% L^2)))
Gq1 <- 4 * L *((1-LL2) %*% L^2)
Gq2 <- 4 * (LL * (L^2 %*% t(L^2))) %*% L
Gq <- Gq1 - Gq2
return(list(Gq=Gq,f=f,Method=Method))
}
vgQ.geomin <- function(L,eps=.01){
Method <- "Geomin"
k <- ncol(L)
p <- nrow(L)
L2 <- L^2+eps
pro <- exp(apply(log(L2),1,sum)/k)
f <- sum(pro)
Gq <- (2/k)*(L/L2)*matrix(rep(pro,k),p)
return(list(Gq=Gq,f=f,Method=Method))
}
vgQ.cf <- function(L,kappa=0){
k <- ncol(L)
p <- nrow(L)
# kappa <- 0 # Quartimax
# kappa <- 1/p # Varimax
# kappa <- m/(2*p) # Equamax
# kappa <- (m-1)/(p+m-2) # Parsimax
# kappa <- 1 # Factor parsimony
Method <- paste("Crawford-Ferguson:k=",kappa,sep="")
N <- matrix(1,k,k)-diag(k)
M <- matrix(1,p,p)-diag(p)
L2 <- L^2
f1 <- (1-kappa)*sum(diag(crossprod(L2,L2 %*% N)))/4
f2 <- kappa*sum(diag(crossprod(L2,M %*% L2)))/4
f <- f1 + f2
Gq <- (1-kappa) * L * (L2 %*% N) + kappa * L * (M %*% L2)
return(list(Gq=Gq,f=f,Method=Method))
}
vgQ.infomax <- function(L){
Method <- "Infomax"
k <- ncol(L)
p <- nrow(L)
S <- L^2
s <- sum(S)
s1 <- apply(S, 1, sum)
s2 <- apply(S, 2, sum)
E <- S/s
e1 <- s1/s
e2 <- s2/s
Q0 <- sum(-E * log(E))
Q1 <- sum(-e1 * log(e1))
Q2 <- sum(-e2 * log(e2))
f <- log(k) + Q0 - Q1 - Q2
H <- -(log(E) + 1)
alpha <- sum(S * H)/s^2
G0 <- H/s - alpha * matrix(1, p, k)
h1 <- -(log(e1) + 1)
alpha1 <- s1 %*% h1/s^2
G1 <- matrix(rep(h1,k), p)/s - as.vector(alpha1) * matrix(1, p, k)
h2 <- -(log(e2) + 1)
alpha2 <- h2 %*% s2/s^2
G2 <- matrix(rep(h2,p), ncol=k, byrow=T)/s - as.vector(alpha2) * matrix(1, p, k)
Gq <- 2 * L * (G0 - G1 - G2)
return(list(Gq=Gq,f=f,Method=Method))
}
vgQ.mccammon <- function(L){
Method <- "McCammon entropy"
k <- ncol(L)
p <- nrow(L)
S <- L^2
M <- matrix(1,p,p)
s2 <- apply(S, 2, sum)
P <- S / matrix(rep(s2,p),ncol=k,byrow=T)
Q1 <- -sum(P * log(P))
H <- -(log(P) + 1)
R <- M %*% S
G1 <- H/R - M %*% (S*H/R^2)
s <- sum(S)
p2 <- s2/s
Q2 <- -sum(p2 * log(p2))
h <- -(log(p2) + 1)
alpha <- h %*% p2
G2 <- rep(1,p) %*% t(h)/s - as.vector(alpha)*matrix(1,p,k)
Gq <- 2*L*(G1/Q1 - G2/Q2)
Q <- log(Q1) - log(Q2)
return(list(Gq=Gq,f=Q,Method=Method))
}
#
# GPromax is a separate function!!!
# Call directly from command prompt.
# R code only.
#
GPromax <- function(A,pow=3){
method <- "Promax"
# Initial rotation: Standardized Varimax
#require(mva)
xx <- promax(A,pow)
Lh <- xx$loadings
Th <- xx$rotmat
orthogonal <- F
Table <- NULL
return(list(Lh=Lh,Th=Th,Table=NULL,method,orthogonal=orthogonal))
}
FindBifactor <- function(A,reps){
warn=-1
results <- rep( list(list()), reps )
criterion <- rep(NA,reps)
m <- dim(A)[2]
for(i in 1:reps) {
x <- GPForth(A,method="bifactor",Tmat = Random.Start(m))
criterion[i] <- min(x$Table[,2])
results[[i]] <- x
}
j <- order(criterion)[1]
warn=1
return(results[[j]])
}
FindBestPattern <- function(A,method,is.oblique=FALSE,reps=15){
results <- rep( list(list()), reps )
criterion <- rep(NA,reps)
m <- dim(A)[2]
for(i in 1:reps) {
if(!is.oblique)x <- GPForth(A,method=method,Tmat = Random.Start(m))else
x <- GPFoblq(A,method=method,Tmat=Random.Start(m))
criterion[i] <- min(x$Table[,2])
results[[i]] <- x
}
j <- order(criterion)[1]
return(results[[j]])
}
FixPattern <- function(res,sort=TRUE){
F <- res$Lh
p <- dim(F)[1]
m <- dim(F)[2]
factor.names <- paste("Factor",1:m,sep="")
one.prime <- matrix(1,1,p)
F.sign <- as.vector(sign(one.prime %*% F))
#  cat("\nLoadings:\n")
#  fx <- format(round(Lambda, digits))
#  names(fx) <- NULL
#  nc <- nchar(fx[1L], type="c")
#  fx[abs(Lambda) < cutoff] <- paste(rep(" ", nc), collapse = "")
#  print(fx, quote = FALSE, ...)
#  F <- Lambda
#fix signs
Lambda <- F
Lambda <- Lambda %*% diag(F.sign)
#sort columns by SS loadings
mx <- diag(t(Lambda)%*%Lambda)
ind <- order(mx,decreasing=TRUE)
Lambda <- Lambda[,ind]
#  browser()
#  print(res$orthogonal)
#  print(res$Phi)
if(!res$orthogonal)
{
#   fix up Phi
Phi <- diag(F.sign) %*% res$Phi %*% diag(F.sign)
Phi <- Phi[ind,]
Phi <- Phi[,ind]
}
if (sort) {
mx <- max.col(abs(Lambda))
ind <- cbind(1L:p, mx)
mx[abs(Lambda[ind]) < 0.4] <- m + 1
Lambda <- Lambda[order(mx, 1L:p),]
}
colnames(Lambda) <- factor.names
res$Lh <- Lambda
if(!res$orthogonal)
{
colnames(Phi) <- factor.names
rownames(Phi) <- factor.names
res$Phi <- Phi
}
return(res)
}
FindBifactorPattern <- function(A,reps,digits=2) {
options(warn=-1)
p<-dim(A)[1]
out <- FindBifactor(A,reps)
F <- out$Lh
one.prime <- matrix(1,1,p)
F.sign <- as.vector(sign(one.prime %*% F))
F <- F %*% diag(F.sign)
options(warn=1)
return(round(F,digits))
}
GPromax <- function(A,pow=3){
method <- "Promax"
# Initial rotation: Standardized Varimax
xx <- promax(A,pow)
Lh <- xx$loadings
Th <- xx$rotmat
orthogonal <- F
Table <- NULL
Tinv <- solve(Th)
Phi <- Tinv %*% t(Tinv)
return(list(Lh=Lh,Phi=Phi,Th=Th,Table=NULL,method,orthogonal=orthogonal))
}
print.FLS <- function(x, sort=TRUE, num.digits=3, cutoff=.25, ...)
{
Lambda <- unclass(x$F)
p <- nrow(Lambda)
factors <- ncol(Lambda)
if (sort) {
mx <- max.col(abs(Lambda))
ind <- cbind(1L:p, mx)
mx[abs(Lambda[ind]) < 0.5] <- factors + 1
Lambda <- Lambda[order(mx, 1L:p),]
}
fx <- format(round(Lambda, num.digits))
names(fx) <- NULL
nc <- nchar(fx[1L], type="c")
fx[abs(Lambda) < cutoff] <- paste(rep(" ", nc), collapse = "")
print(fx, quote = FALSE, ...)
vx <- colSums(Lambda^2)
varex <- rbind("SS loadings" = vx)
if(is.null(attr(x, "covariance"))) {
varex <- rbind(varex, "Proportion Var" = vx/p)
if(factors > 1)
varex <- rbind(varex, "Cumulative Var" = cumsum(vx/p))
}
cat("\n")
print(round(varex, num.digits))
if(!is.null(x$Phi)){
cat("\nFactor Intercorrelations\n")
cat("------------------------\n")
print(round(unclass(x$Phi),num.digits))
}
invisible(x)
}
print.MLFA<-function(x,num.digits=3,cutoff=0.25,...){
cat("\nUnrotated Loadings\n------------------\n")
print.FLS(x$Unrotated,num.digits=num.digits,cutoff=cutoff)
cat("\nVarimax Loadings\n------------------\n")
print.FLS(x$Varimax,num.digits=num.digits,cutoff=cutoff)
cat("\nPromax Loadings\n-----------------\n")
print.FLS(x$Promax,num.digits=num.digits,cutoff=cutoff)
cat("\nQuartimin Loadings\n-----------------\n")
print.FLS(x$Quartimin,num.digits=num.digits,cutoff=cutoff)
cat("\nOrthogonal Bifactor Loadings\n---------------------------\n")
print.FLS(x$Bifactor,num.digits=num.digits,cutoff=cutoff)
cat("\nOblique Bifactor Loadings\n-------------------------\n")
invisible(print.FLS(x$BifactorOblique,num.digits=num.digits,cutoff=cutoff))
}
MLFA <- function(Correlation.Matrix=NULL,n.factors=NA,n.obs=NA,data=NULL,Factor.Pattern=NULL,random.starts=15,maxit=1000,num.digits=3,cutoff=0.30,promax.m=3){
cat("This will take a moment.")
if(!is.null(Correlation.Matrix)&&is.null(data)){
R <- Correlation.Matrix
p <- dim(R)[1]
A <- factanal(covmat=R,n.obs=n.obs,factors=n.factors,maxit=maxit,
rotation="none")$loadings[1:p,]
}
if(!is.null(data))
{R <- cor(data)
n.obs <- dim(data)[1]
p <- dim(R)[1]
A <- factanal(covmat=R,n.obs=n.obs,factors=n.factors,maxit=maxit,
rotation="none")$loadings[1:p,]}
if(is.null(data)&&is.null(Correlation.Matrix)){ A <- Factor.Pattern
p <- dim(A)[1]
}
m <- dim(A)[2]
factor.labels <- paste("Factor",1:m,sep="")
A.varimax <- varimax(A)$loadings[1:p,]
o = TRUE
res <- list(Lh=A.varimax,orthogonal=o)
res <- FixPattern(res)
A.varimax <- list(F=res$Lh)
res <- GPromax(A,pow=promax.m)
res <- list(Lh=res$Lh,Phi=res$Phi,orthogonal=FALSE)
res <- FixPattern(res)
Phi.promax <- res$Phi
A.promax <- list(F=res$Lh,Phi=Phi.promax,orthogonal=FALSE)
cat(".")
res <- FindBestPattern(A,"quartimin",reps=random.starts,is.oblique=TRUE)
res <- list(Lh=res$Lh,Phi=res$Phi,orthogonal=FALSE)
res <- FixPattern(res)
Phi.quartimin <- res$Phi
A.quartimin <- list(F=res$Lh,Phi = Phi.quartimin)
cat(".")
res <- FindBestPattern(A,"bifactor",reps=random.starts)
orthogonal=TRUE
res <- list(Lh=res$Lh,Phi=res$Phi,orthogonal=orthogonal)
res <- FixPattern(res)
Phi=NULL
A.bifactor <- list(F=res$Lh,Phi=Phi)
cat(".")
res <- FindBestPattern(A,"bifactor",reps=random.starts,is.oblique=TRUE)
res <- list(Lh=res$Lh,Phi=res$Phi,orthogonal=FALSE)
res <- FixPattern(res)
cat(".")
Phi.bifactor.oblique <- res$Phi
A.bifactor.oblique <- list(F=res$Lh,Phi=Phi.bifactor.oblique)
A = list(F=A,Phi=NULL)
cat(".")
class(A.promax)="FLS"
class(A)="FLS"
class(A.quartimin)="FLS"
cat(".exiting\n")
class(A.varimax)="FLS"
class(A.bifactor)="FLS"
class(A.bifactor.oblique)="FLS"
output<-list(Unrotated = A,
Varimax=A.varimax,
Promax = A.promax,
Quartimin = A.quartimin,
Bifactor  = A.bifactor,
BifactorOblique = A.bifactor.oblique  )
class(output) = "MLFA"
return(output)
}
Loadings <- function(x,num.digits=3,cutoff=.25){
invisible(print.MLFA(x,cutoff=cutoff,num.digits=num.digits))
}
out.4 <- MLFA(R, n.factors=4, n.obs=575)
Loadings(out.3, cutoff=.3, num.digits=2)
out.4 <- MLFA(R, n.factors=4, n.obs=575)
Loadings(out.3, cutoff=.3, num.digits=2)
out.3 <- MLFA(R, n.factors=3, n.obs=575)
Loadings(out.3, cutoff=.3, num.digits=2)
